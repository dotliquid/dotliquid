{
  "description": "Golden Liquid test suite",
  "tests": [
    {
      "name": "identifiers, ascii lowercase",
      "template": "{% assign foo = 'hello' %}{{ foo }} {{ bar }}",
      "data": {
        "bar": "goodbye"
      },
      "tags": [
        "strict"
      ],
      "result": "hello goodbye"
    },
    {
      "name": "identifiers, ascii uppercase",
      "template": "{% assign FOO = 'hello' %}{{ FOO }} {{ BAR }}",
      "data": {
        "BAR": "goodbye"
      },
      "tags": [
        "strict"
      ],
      "result": "hello goodbye"
    },
    {
      "name": "identifiers, digits",
      "template": "{% assign foo1 = 'hello' %}{{ foo1 }} {{ bar2 }}",
      "data": {
        "bar2": "goodbye"
      },
      "tags": [
        "strict"
      ],
      "result": "hello goodbye"
    },
    {
      "name": "identifiers, only digits",
      "template": "{% assign 123 = 'hello' %}{{ 123 }} {{ 456 }}",
      "data": {
        "456": "goodbye"
      },
      "tags": [
        "strict"
      ],
      "result": "123 456"
    },
    {
      "name": "identifiers, hyphens",
      "template": "{% assign foo-a = 'hello' %}{{ foo-a }} {{ bar-b }}",
      "data": {
        "bar-b": "goodbye"
      },
      "tags": [
        "strict"
      ],
      "result": "hello goodbye"
    },
    {
      "name": "identifiers, leading hyphen",
      "template": "{% assign -foo = 'hello' %}{{ -foo }} {{ -bar }}",
      "data": {
        "-bar": "goodbye"
      },
      "tags": [
        "strict"
      ],
      "invalid": true
    },
    {
      "name": "identifiers, underscore",
      "template": "{% assign foo_a = 'hello' %}{{ foo_a }} {{ bar_b }}",
      "data": {
        "bar_b": "goodbye"
      },
      "tags": [
        "strict"
      ],
      "result": "hello goodbye"
    },
    {
      "name": "identifiers, only underscore",
      "template": "{% assign _ = 'hello' %}{{ _ }} {{ __ }}",
      "data": {
        "__": "goodbye"
      },
      "tags": [
        "strict"
      ],
      "result": "hello goodbye"
    },
    {
      "name": "identifiers, leading underscore",
      "template": "{% assign _foo = 'hello' %}{{ _foo }} {{ _bar }}",
      "data": {
        "_bar": "goodbye"
      },
      "tags": [
        "strict"
      ],
      "result": "hello goodbye"
    },
    {
      "name": "identifiers, trailing question mark assign",
      "template": "{% assign foo? = 'hello' %}{{ foo? }}",
      "tags": [
        "strict"
      ],
      "invalid": true
    },
    {
      "name": "identifiers, trailing question mark output",
      "template": "{{ bar? }}",
      "data": {
        "bar?": "goodbye"
      },
      "tags": [
        "strict"
      ],
      "result": "goodbye"
    },
    {
      "name": "identifiers, hyphen in for loop target",
      "template": "{% for x in f-oo %}{{ x }}{% endfor %}",
      "data": {
        "f-oo": [
          1,
          2,
          3
        ]
      },
      "tags": [
        "strict"
      ],
      "result": "123"
    },
    {
      "name": "identifiers, leading hyphen in for loop target",
      "template": "{% for x in -foo %}{{ x }}{% endfor %}",
      "data": {
        "-foo": [
          1,
          2,
          3
        ]
      },
      "tags": [
        "strict"
      ],
      "invalid": true
    },
    {
      "name": "identifiers, hyphen in for loop variable",
      "template": "{% for x-y in foo %}{{ x-y }}{% endfor %}",
      "data": {
        "foo": [
          1,
          2,
          3
        ]
      },
      "tags": [
        "strict"
      ],
      "result": "123"
    },
    {
      "name": "identifiers, trailing question mark in for loop target",
      "template": "{% for x in foo? %}{{ x }}{% endfor %}",
      "data": {
        "foo?": [
          1,
          2,
          3
        ]
      },
      "tags": [
        "strict"
      ],
      "result": "123"
    },
    {
      "name": "identifiers, trailing question mark in for loop variable",
      "template": "{% for x? in foo %}{{ x? }}{% endfor %}",
      "data": {
        "foo": [
          1,
          2,
          3
        ]
      },
      "tags": [
        "strict"
      ],
      "result": "123"
    },
    {
      "name": "identifiers, increment with a hyphen",
      "template": "{% increment f-oo %}{% increment f-oo %}",
      "tags": [
        "strict"
      ],
      "result": "01"
    },
    {
      "name": "identifiers, decrement with a hyphen",
      "template": "{% decrement f-oo %}{% decrement f-oo %}",
      "tags": [
        "strict"
      ],
      "result": "-1-2"
    },
    {
      "name": "identifiers, capture ascii lowercase",
      "template": "{% capture foo %}hello{% endcapture %}{{ foo }}",
      "tags": [
        "strict"
      ],
      "result": "hello"
    },
    {
      "name": "identifiers, capture ascii uppercase",
      "template": "{% capture FOO %}hello{% endcapture %}{{ FOO }}",
      "tags": [
        "strict"
      ],
      "result": "hello"
    },
    {
      "name": "identifiers, capture digits",
      "template": "{% capture foo1 %}hello{% endcapture %}{{ foo1 }}",
      "tags": [
        "strict"
      ],
      "result": "hello"
    },
    {
      "name": "identifiers, capture only digits",
      "template": "{% capture 123 %}hello{% endcapture %}{{ 123 }}",
      "tags": [
        "strict"
      ],
      "result": "123"
    },
    {
      "name": "identifiers, capture hyphens",
      "template": "{% capture foo-a %}hello {{ bar-b }}{% endcapture %}{{ foo-a }}",
      "data": {
        "bar-b": "goodbye"
      },
      "tags": [
        "strict"
      ],
      "result": "hello goodbye"
    },
    {
      "name": "identifiers, capture leading hyphen",
      "template": "{% capture -foo %}hello {{ -bar }}{% endcapture %}{{ -foo }}",
      "data": {
        "-bar": "goodbye"
      },
      "tags": [
        "strict"
      ],
      "invalid": true
    },
    {
      "name": "identifiers, capture underscore",
      "template": "{% capture foo_a %}hello {{ bar_b }}{% endcapture %}{{ foo_a }}",
      "data": {
        "bar_b": "goodbye"
      },
      "tags": [
        "strict"
      ],
      "result": "hello goodbye"
    },
    {
      "name": "identifiers, capture only underscore",
      "template": "{% capture _ %}hello {{ __ }}{% endcapture %}{{ _ }}",
      "data": {
        "__": "goodbye"
      },
      "tags": [
        "strict"
      ],
      "result": "hello goodbye"
    },
    {
      "name": "identifiers, capture leading underscore",
      "template": "{% capture _foo %}hello {{ _bar }}{% endcapture %}{{ _foo }}",
      "data": {
        "_bar": "goodbye"
      },
      "tags": [
        "strict"
      ],
      "result": "hello goodbye"
    },
    {
      "name": "identifiers, at sign",
      "template": "{{ @foo }}",
      "data": {
        "@foo": "hello"
      },
      "tags": [
        "strict"
      ],
      "invalid": true
    },
    {
      "name": "illegal, unknown tag",
      "template": "{% nosuchthing %}",
      "tags": [
        "strict"
      ],
      "invalid": true
    },
    {
      "name": "illegal, no addition operator",
      "template": "{% assign x = 1 + 2 %}{{ x }}",
      "tags": [
        "strict",
        "absent"
      ],
      "invalid": true
    },
    {
      "name": "illegal, no subtraction operator",
      "template": "{% assign x = 1 - 2 %}{{ x }}",
      "tags": [
        "strict",
        "absent"
      ],
      "invalid": true
    },
    {
      "name": "illegal, no multiplication operator",
      "template": "{% assign x = 2 %}{{ x * 3 }}",
      "tags": [
        "strict",
        "absent"
      ],
      "invalid": true
    },
    {
      "name": "output, render a string literal",
      "template": "{{ 'hello' }}",
      "result": "hello"
    },
    {
      "name": "output, render an integer literal",
      "template": "{{ 123 }}",
      "result": "123"
    },
    {
      "name": "output, render a negative integer literal",
      "template": "{{ -123 }}",
      "result": "-123"
    },
    {
      "name": "output, render a float literal",
      "template": "{{ 1.23 }}",
      "result": "1.23"
    },
    {
      "name": "output, render nil",
      "template": "{{ nil }}",
      "result": ""
    },
    {
      "name": "output, render a variable from the global namespace",
      "template": "{{ product.title }}",
      "data": {
        "product": {
          "title": "foo"
        }
      },
      "result": "foo"
    },
    {
      "name": "output, render a variable from the local namespace",
      "template": "{% assign name = 'Brian' %}{{ name }}",
      "result": "Brian"
    },
    {
      "name": "output, render an undefined variable",
      "template": "{{ age }}",
      "result": ""
    },
    {
      "name": "output, render an undefined property",
      "template": "{{ product.age }}",
      "data": {
        "product": {
          "title": "foo"
        }
      },
      "result": ""
    },
    {
      "name": "output, access an array item by index",
      "template": "{{ product.tags[1] }}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "result": "garden"
    },
    {
      "name": "output, access an array item by negative index",
      "template": "{{ product.tags[-2] }}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "result": "sports"
    },
    {
      "name": "output, access array item by index stored in a local variable",
      "template": "{% assign i = 1 %}{{ product.tags[i] }}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "result": "garden"
    },
    {
      "name": "output, render a global variable with a filter",
      "template": "{{ product.title | upcase }}",
      "data": {
        "product": {
          "title": "foo"
        }
      },
      "result": "FOO"
    },
    {
      "name": "output, dump an array from the global context",
      "template": "{{ product.tags | join: '#' }}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "result": "sports#garden"
    },
    {
      "name": "output, assign a variable the value of an existing variable",
      "template": "{% capture some %}hello{% endcapture %}{% assign other = some %}{% assign some = 'foo' %}{{ some }}-{{ other }}",
      "result": "foo-hello"
    },
    {
      "name": "output, traverse variables with bracketed identifiers",
      "template": "{{ site.data.menu[include.menu][include.locale] }}",
      "data": {
        "site": {
          "data": {
            "menu": {
              "foo": {
                "bar": "it works!"
              }
            }
          }
        },
        "include": {
          "menu": "foo",
          "locale": "bar"
        }
      },
      "result": "it works!"
    },
    {
      "name": "output, render a default given a literal false",
      "template": "{{ false | default: 'bar' }}",
      "result": "bar"
    },
    {
      "name": "output, render a default given a literal false with 'allow false' equal to true",
      "template": "{{ false | default: 'bar', allow_false: true }}",
      "result": "false"
    },
    {
      "name": "output, render a default given a literal false with 'allow false' equal to false",
      "template": "{{ false | default: 'bar', allow_false: false }}",
      "result": "bar"
    },
    {
      "name": "output, unexpected left value for the `join` filter passes through",
      "template": "{{ 12 | join: '#' }}",
      "result": "12"
    },
    {
      "name": "output, render an output start sequence as a string literal",
      "template": "{{ '{{' }}",
      "result": "{{"
    },
    {
      "name": "output, access an undefined variable by index",
      "template": "{{ nosuchthing[0] }}",
      "result": ""
    },
    {
      "name": "output, render a range object",
      "template": "{{ (1..5) | join: '#' }}",
      "result": "1#2#3#4#5"
    },
    {
      "name": "output, render a range object that uses a float",
      "template": "{{ (1.4..5) | join: '#' }}",
      "result": "1#2#3#4#5"
    },
    {
      "name": "output, render a range object that uses an identifier",
      "template": "{{ (foo..5) | join: '#' }}",
      "data": {
        "foo": 2
      },
      "result": "2#3#4#5"
    },
    {
      "name": "output, reverse a range",
      "template": "{{ (foo..5) | reverse | join: '#' }}",
      "data": {
        "foo": 2
      },
      "result": "5#4#3#2"
    },
    {
      "name": "output, chained bracketed identifier index",
      "template": "{{ products[0].title }}",
      "data": {
        "products": [
          {
            "title": "shoe"
          },
          {
            "title": "hat"
          }
        ]
      },
      "result": "shoe"
    },
    {
      "name": "output, chained bracketed identifier index no dot",
      "template": "{{ products[0]title }}",
      "data": {
        "products": [
          {
            "title": "shoe"
          },
          {
            "title": "hat"
          }
        ]
      },
      "tags": [
        "strict"
      ],
      "invalid": true
    },
    {
      "name": "output, chained identifier dot separated index",
      "template": "{{ products.0.title }}",
      "data": {
        "products": [
          {
            "title": "shoe"
          },
          {
            "title": "hat"
          }
        ]
      },
      "tags": [
        "strict"
      ],
      "invalid": true
    },
    {
      "name": "output, dot followed by bracket",
      "template": "{{ product.['title'] }}",
      "data": {
        "product": {
          "title": "shoe"
        }
      },
      "tags": [
        "strict"
      ],
      "invalid": true
    },
    {
      "name": "output, bracketed variable resolves to a string",
      "template": "{{ foo[something] }}",
      "data": {
        "foo": {
          "hello": "goodbye"
        },
        "something": "hello"
      },
      "result": "goodbye"
    },
    {
      "name": "output, bracketed variable resolves to a string without leading identifier",
      "template": "{{ [something] }}",
      "data": {
        "something": "hello",
        "hello": "goodbye"
      },
      "result": "goodbye"
    },
    {
      "name": "output, nested bracketed variable resolving to a string",
      "template": "{{ [list[settings.zero]] }}",
      "data": {
        "list": [
          "foo"
        ],
        "settings": {
          "zero": 0
        },
        "foo": "bar"
      },
      "result": "bar"
    },
    {
      "name": "output, quoted, bracketed variable name",
      "template": "{{ foo['bar'] }}",
      "data": {
        "foo": {
          "bar": 42
        }
      },
      "result": "42"
    },
    {
      "name": "output, quoted, bracketed variable name with whitespace",
      "template": "{{ foo['bar baz'] }}",
      "data": {
        "foo": {
          "bar baz": 42
        }
      },
      "result": "42"
    },
    {
      "name": "output, top-level quoted, bracketed variable name with whitespace",
      "template": "{{ ['bar baz'] }}",
      "data": {
        "bar baz": 42
      },
      "result": "42"
    },
    {
      "name": "output, top-level quoted, bracketed variable name with whitespace followed by dot notation",
      "template": "{{ ['bar baz'].qux }}",
      "data": {
        "bar baz": {
          "qux": 42
        }
      },
      "result": "42"
    },
    {
      "name": "output, whitespace between word and dot",
      "template": "{{ foo \n\t.bar }}",
      "data": {
        "foo": {
          "bar": 42
        }
      },
      "result": "42"
    },
    {
      "name": "output, whitespace between dot and word",
      "template": "{{ foo. \n\tbar }}",
      "data": {
        "foo": {
          "bar": 42
        }
      },
      "result": "42"
    },
    {
      "name": "output, whitespace between bracket notation",
      "template": "{{ ['foo'] \n\t['bar'] }}",
      "data": {
        "foo": {
          "bar": 42
        }
      },
      "result": "42"
    },
    {
      "name": "output, whitespace between words",
      "template": "{{ foo \n\tbar }}",
      "data": {
        "foo": {
          "bar": 42
        }
      },
      "tags": [
        "strict"
      ],
      "invalid": true
    },
    {
      "name": "output, double dot",
      "template": "{{ foo..bar }}",
      "data": {
        "foo": {
          "bar": 42
        }
      },
      "tags": [
        "strict"
      ],
      "invalid": true
    },
    {
      "name": "output, array index out of bounds",
      "template": "{{ a[3] }}",
      "data": {
        "a": [
          1,
          2,
          3
        ]
      },
      "result": ""
    },
    {
      "name": "output, negative array index out of bounds",
      "template": "{{ a[-4] }}",
      "data": {
        "a": [
          1,
          2,
          3
        ]
      },
      "result": ""
    },
    {
      "name": "range, start is not a number",
      "template": "{{ (start..end) | join: '#' }}",
      "data": {
        "start": "foo",
        "end": 5
      },
      "result": "0#1#2#3#4#5"
    },
    {
      "name": "range, end is not a number",
      "template": "{{ (start..end) | join: '#' }}",
      "data": {
        "start": "1",
        "end": "foo"
      },
      "result": ""
    },
    {
      "name": "range, end is less than start",
      "template": "{{ (start..end) | join: '#' }}",
      "data": {
        "start": 5,
        "end": 1
      },
      "result": ""
    },
    {
      "name": "range, start is negative",
      "template": "{{ (start..end) | join: '#' }}",
      "data": {
        "start": -5,
        "end": 1
      },
      "result": "-5#-4#-3#-2#-1#0#1"
    },
    {
      "name": "range, start and end are negative",
      "template": "{{ (start..end) | join: '#' }}",
      "data": {
        "start": -5,
        "end": -2
      },
      "result": "-5#-4#-3#-2"
    },
    {
      "name": "range, integer literals",
      "template": "{{ (1..5) | join: '#' }}",
      "result": "1#2#3#4#5"
    },
    {
      "name": "range, whitespace before start",
      "template": "{{ ( \n\t1..5) | join: '#' }}",
      "result": "1#2#3#4#5"
    },
    {
      "name": "range, whitespace after stop",
      "template": "{{ (1..5 \n\t) | join: '#' }}",
      "result": "1#2#3#4#5"
    },
    {
      "name": "range, whitespace before dots",
      "template": "{{ (1 \n\t..5) | join: '#' }}",
      "result": "1#2#3#4#5"
    },
    {
      "name": "range, whitespace after dots",
      "template": "{{ (1.. \n\t5) | join: '#' }}",
      "result": "1#2#3#4#5"
    },
    {
      "name": "range, whitespace before and after dots",
      "template": "{{ (1 .. 5) | join: '#' }}",
      "result": "1#2#3#4#5"
    },
    {
      "name": "range, whitespace before and after dots, for loop",
      "template": "{% for x in (1 .. 5) %}{{ x }},{% endfor %}",
      "tags": [
        "strict"
      ],
      "result": "1,2,3,4,5,"
    },
    {
      "name": "special, first of an array",
      "template": "{{ a.first }}",
      "data": {
        "a": [
          3,
          2,
          1
        ]
      },
      "result": "3"
    },
    {
      "name": "special, last of an array",
      "template": "{{ a.last }}",
      "data": {
        "a": [
          3,
          2,
          1
        ]
      },
      "result": "1"
    },
    {
      "name": "special, size of an array",
      "template": "{{ a.size }}",
      "data": {
        "a": [
          3,
          2,
          1
        ]
      },
      "result": "3"
    },
    {
      "name": "special, size of a string",
      "template": "{{ s.size }}",
      "data": {
        "s": "hello"
      },
      "result": "5"
    },
    {
      "name": "special, first of a string",
      "template": "{{ s.first }}",
      "data": {
        "s": "hello"
      },
      "results": [
        "h",
        ""
      ]
    },
    {
      "name": "special, first of an object",
      "template": "{{ obj.first | join: '#' }}",
      "data": {
        "obj": {
          "a": 1,
          "b": 2
        }
      },
      "result": "a#1"
    },
    {
      "name": "special, first of an empty object",
      "template": "{{ obj.first | join: '#' }}",
      "data": {
        "obj": {}
      },
      "result": ""
    },
    {
      "name": "special, last of a string",
      "template": "{{ s.last }}",
      "data": {
        "s": "hello"
      },
      "results": [
        "o",
        ""
      ]
    },
    {
      "name": "special, last of a object",
      "template": "{{ obj.last }}",
      "data": {
        "obj": {
          "a": 1,
          "b": 2
        }
      },
      "result": ""
    },
    {
      "name": "special, size of an object with a size property",
      "template": "{{ obj.size }}",
      "data": {
        "obj": {
          "size": 99
        }
      },
      "result": "99"
    },
    {
      "name": "special, first of an object with a first property",
      "template": "{{ obj.first }}",
      "data": {
        "obj": {
          "a": 1,
          "first": 99
        }
      },
      "result": "99"
    },
    {
      "name": "special, last of an object with a last property",
      "template": "{{ obj.last }}",
      "data": {
        "obj": {
          "a": 1,
          "last": 99,
          "b": 42
        }
      },
      "result": "99"
    },
    {
      "name": "special, size of undefined",
      "template": "{{ nosuchthing.last }}",
      "result": ""
    },
    {
      "name": "whitespace control, white space control with newlines and spaces",
      "template": "\n{% if customer -%}\nWelcome back,  {{ customer.first_name -}} !\n {%- endif -%}",
      "data": {
        "customer": {
          "first_name": "Holly"
        }
      },
      "result": "\nWelcome back,  Holly!"
    },
    {
      "name": "whitespace control, white space control with carriage return and spaces",
      "template": "\r{% if customer -%}\rWelcome back,  {{ customer.first_name -}} !\r {%- endif -%}",
      "data": {
        "customer": {
          "first_name": "Holly"
        }
      },
      "result": "\rWelcome back,  Holly!"
    },
    {
      "name": "whitespace control, white space control with  carriage return, newline and spaces",
      "template": "\r\n{% if customer -%}\r\nWelcome back,  {{ customer.first_name -}} !\r\n {%- endif -%}",
      "data": {
        "customer": {
          "first_name": "Holly"
        }
      },
      "result": "\r\nWelcome back,  Holly!"
    },
    {
      "name": "whitespace control, white space control with newlines, tabs and spaces",
      "template": "\n\t{% if customer -%}\t\nWelcome back,  {{ customer.first_name -}}\t !\r\n {%- endif -%}",
      "data": {
        "customer": {
          "first_name": "Holly"
        }
      },
      "result": "\n\tWelcome back,  Holly!"
    },
    {
      "name": "whitespace control, suppress whitespace only if blocks",
      "template": "!{% if true %}\n\n{% assign bar = 'foo' %}\n{% if true %}\n\n\n    {% assign foo = 'bar' %}\n\n{% endif %}\n\n\n{% endif %}!",
      "result": "!!"
    },
    {
      "name": "whitespace control, suppress whitespace only unless blocks",
      "template": "!{% unless false %}\n\n{% assign bar = 'foo' %}\n{% unless false %}\n\n\n    {% assign foo = 'bar' %}\n\n{% endunless %}\n\n\n{% endunless %}!",
      "result": "!!"
    },
    {
      "name": "whitespace control, suppress whitespace only case blocks",
      "template": "!{% assign x = 1 %}{% case x %}\n\n  {% when 1 %}\n    {% assign foo = 'bar' %}\n\n\n{% endcase %}!",
      "result": "!!"
    },
    {
      "name": "whitespace control, don't suppress whitespace only blocks containing output",
      "template": "!{% if true %}\n\n{% assign bar = 'foo' %}\n    {{ '' }}\n\n    {% assign foo = 'bar' %}\n\n\n\n{% endif %}!",
      "result": "!\n\n\n    \n\n    \n\n\n\n!"
    },
    {
      "name": "whitespace control, don't suppress whitespace only blocks containing echo",
      "template": "!{% if true %}\n\n{% assign bar = 'foo' %}\n    {% echo '' %}\n\n    {% assign foo = 'bar' %}\n\n\n\n{% endif %}!",
      "result": "!\n\n\n    \n\n    \n\n\n\n!"
    },
    {
      "name": "whitespace control, don't suppress whitespace only blocks containing output in nested block",
      "template": "!{% if 1 %}\n\n{% assign bar = 'foo' %}\n{% if 2 %}\n    {{ '' }}\n\n    {% assign foo = 'bar' %}\n\n{% endif %}\n\n\n{% endif %}!",
      "result": "!\n\n\n\n    \n\n    \n\n\n\n\n!"
    },
    {
      "name": "whitespace control, don't suppress whitespace only unless blocks containing output in nested blocks",
      "template": "!{% unless false %}\n\n{% assign bar = 'foo' %}\n{% unless false %}\n    {{ '' }}\n\n    {% assign foo = 'bar' %}\n\n{% endunless %}\n\n\n{% endunless %}!",
      "result": "!\n\n\n\n    \n\n    \n\n\n\n\n!"
    },
    {
      "name": "whitespace control, don't suppress whitespace only blocks containing output in unreachable blocks",
      "template": "!{% if 1 %}\n\n{% assign bar = 'foo' %}\n{% if true %}\n\n    {% assign foo = 'bar' %}\n\n{% else %}\n    {{ '' }}\n{% endif %}\n\n\n{% endif %}!",
      "result": "!\n\n\n\n\n    \n\n\n\n\n!"
    },
    {
      "name": "whitespace control, suppress whitespace surrounding an empty capture block",
      "template": "!{% if true %}\n\n{% capture foo %}{% endcapture %}\n\n{% endif %}!",
      "result": "!!"
    },
    {
      "name": "whitespace control, suppress whitespace surrounding a capture block",
      "template": "!{% if true %}\n\n{% capture foo %}\n{{ '' }}\n{% endcapture %}\n\n{% endif %}!",
      "result": "!!"
    },
    {
      "name": "whitespace control, don't suppress whitespace only case blocks containing output",
      "template": "!{% assign x = 1 %}{% case x %}\n\n  {% when 1 %}\n    {% assign foo = 'bar' %}\n\n  {% when 2 %}\n    {{ '' }}\n\n{% endcase %}!",
      "result": "!\n    \n\n  !"
    },
    {
      "name": "whitespace control, white space control with raw tags",
      "template": "! {% raw %}{{ hello }}{% endraw %} !\n! {%- raw -%}{{ hello }}{%- endraw -%} !",
      "result": "! {{ hello }} !\n!{{ hello }}!"
    },
    {
      "name": "filters, abs, positive integer",
      "template": "{{ 5 | abs }}",
      "result": "5"
    },
    {
      "name": "filters, abs, negative integer",
      "template": "{{ -5 | abs }}",
      "result": "5"
    },
    {
      "name": "filters, abs, positive float",
      "template": "{{ 5.4 | abs }}",
      "result": "5.4"
    },
    {
      "name": "filters, abs, negative float",
      "template": "{{ -5.4 | abs }}",
      "result": "5.4"
    },
    {
      "name": "filters, abs, zero",
      "template": "{{ 0 | abs }}",
      "result": "0"
    },
    {
      "name": "filters, abs, positive string integer",
      "template": "{{ '5' | abs }}",
      "result": "5"
    },
    {
      "name": "filters, abs, negative string integer",
      "template": "{{ '-5' | abs }}",
      "result": "5"
    },
    {
      "name": "filters, abs, positive string float",
      "template": "{{ '5.1' | abs }}",
      "result": "5.1"
    },
    {
      "name": "filters, abs, negative string float",
      "template": "{{ '-5.1' | abs }}",
      "result": "5.1"
    },
    {
      "name": "filters, abs, unexpected argument",
      "template": "{{ -3 | abs: 1 }}",
      "invalid": true
    },
    {
      "name": "filters, abs, string not a number",
      "template": "{{ 'hello' | abs }}",
      "result": "0"
    },
    {
      "name": "filters, abs, not a string, int or float",
      "template": "{{ a | abs }}",
      "data": {
        "a": {}
      },
      "result": "0"
    },
    {
      "name": "filters, abs, undefined left value",
      "template": "{{ nosuchthing | abs }}",
      "result": "0"
    },
    {
      "name": "filters, append, concat",
      "template": "{{ \"hello\" | append: \"there\" }}",
      "result": "hellothere"
    },
    {
      "name": "filters, append, not a string",
      "template": "{{ 5 | append: 'there' }}",
      "result": "5there"
    },
    {
      "name": "filters, append, argument not a string",
      "template": "{{ \"hello\" | append: 5 }}",
      "result": "hello5"
    },
    {
      "name": "filters, append, missing argument",
      "template": "{{ \"hello\" | append }}",
      "invalid": true
    },
    {
      "name": "filters, append, too many arguments",
      "template": "{{ \"hello\" | append: \"how\", \"are\", \"you\" }}",
      "invalid": true
    },
    {
      "name": "filters, append, undefined left value",
      "template": "{{ nosuchthing | append: \"hi\" }}",
      "result": "hi"
    },
    {
      "name": "filters, append, undefined argument",
      "template": "{{ \"hi\" | append: nosuchthing }}",
      "result": "hi"
    },
    {
      "name": "filters, at least, positive integer < arg",
      "template": "{{ 5 | at_least: 8 }}",
      "result": "8"
    },
    {
      "name": "filters, at least, positive integer > arg",
      "template": "{{ 8 | at_least: 5 }}",
      "result": "8"
    },
    {
      "name": "filters, at least, negative integer < arg",
      "template": "{{ -8 | at_least: 5 }}",
      "result": "5"
    },
    {
      "name": "filters, at least, positive integer == arg",
      "template": "{{ 5 | at_least: 5 }}",
      "result": "5"
    },
    {
      "name": "filters, at least, positive float < arg",
      "template": "{{ 5.4 | at_least: 8.9 }}",
      "result": "8.9"
    },
    {
      "name": "filters, at least, positive float > arg",
      "template": "{{ 8.4 | at_least: 5.9 }}",
      "result": "8.4"
    },
    {
      "name": "filters, at least, positive string > arg",
      "template": "{{ \"9\" | at_least: 8 }}",
      "result": "9"
    },
    {
      "name": "filters, at least, missing arg",
      "template": "{{ 5 | at_least }}",
      "invalid": true
    },
    {
      "name": "filters, at least, too many args",
      "template": "{{ 5 | at_least: 1, 2}}",
      "invalid": true
    },
    {
      "name": "filters, at least, undefined left value",
      "template": "{{ nosuchthing | at_least: 5 }}",
      "result": "5"
    },
    {
      "name": "filters, at least, undefined argument",
      "template": "{{ 5 | at_least: nosuchthing }}",
      "result": "5"
    },
    {
      "name": "filters, at least, left value not a number",
      "template": "{{ \"abc\" | at_least: 2 }}",
      "result": "2"
    },
    {
      "name": "filters, at least, left value not a number negative argument",
      "template": "{{ \"abc\" | at_least: -2 }}",
      "result": "0"
    },
    {
      "name": "filters, at least, argument string not a number",
      "template": "{{ -1 | at_least: \"abc\" }}",
      "result": "0"
    },
    {
      "name": "filters, at most, positive integer < arg",
      "template": "{{ 5 | at_most: 8 }}",
      "result": "5"
    },
    {
      "name": "filters, at most, positive integer > arg",
      "template": "{{ 8 | at_most: 5 }}",
      "result": "5"
    },
    {
      "name": "filters, at most, negative integer < arg",
      "template": "{{ -8 | at_most: 5 }}",
      "result": "-8"
    },
    {
      "name": "filters, at most, positive integer == arg",
      "template": "{{ 5 | at_most: 5 }}",
      "result": "5"
    },
    {
      "name": "filters, at most, positive float < arg",
      "template": "{{ 5.4 | at_most: 8.9 }}",
      "result": "5.4"
    },
    {
      "name": "filters, at most, positive float > arg",
      "template": "{{ 8.4 | at_most: 5.9 }}",
      "result": "5.9"
    },
    {
      "name": "filters, at most, positive string > arg",
      "template": "{{ \"9\" | at_most: 8 }}",
      "result": "8"
    },
    {
      "name": "filters, at most, missing arg",
      "template": "{{ 5 | at_most }}",
      "invalid": true
    },
    {
      "name": "filters, at most, too many args",
      "template": "{{ 5 | at_most: 1, 2}}",
      "invalid": true
    },
    {
      "name": "filters, at most, undefined left value",
      "template": "{{ nosuchthing | at_most: 5 }}",
      "result": "0"
    },
    {
      "name": "filters, at most, undefined argument",
      "template": "{{ 5 | at_most: nosuchthing }}",
      "result": "0"
    },
    {
      "name": "filters, at most, left value not a number",
      "template": "{{ \"abc\" | at_most: -2 }}",
      "result": "-2"
    },
    {
      "name": "filters, base64 decode, from string",
      "template": "{{ \"XyMvLg==\" | base64_decode }}",
      "result": "_#/."
    },
    {
      "name": "filters, base64 decode, from string with URL unsafe",
      "template": "{{ a | base64_decode }}",
      "data": {
        "a": "YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXogQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVogMTIzNDU2Nzg5MCAhQCMkJV4mKigpLT1fKy8/Ljo7W117fVx8"
      },
      "result": "abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ 1234567890 !@#$%^&*()-=_+/?.:;[]{}\\|"
    },
    {
      "name": "filters, base64 decode, not a string",
      "template": "{{ 5 | base64_decode }}",
      "invalid": true
    },
    {
      "name": "filters, base64 decode, unexpected argument",
      "template": "{{ \"hello\" | base64_decode: 5 }}",
      "invalid": true
    },
    {
      "name": "filters, base64 decode, undefined left value",
      "template": "{{ nosuchthing | base64_decode }}",
      "result": ""
    },
    {
      "name": "filters, base64 encode, from string",
      "template": "{{ \"_#/.\" | base64_encode }}",
      "result": "XyMvLg=="
    },
    {
      "name": "filters, base64 encode, from string with URL unsafe",
      "template": "{{ a | base64_encode }}",
      "data": {
        "a": "abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ 1234567890 !@#$%^&*()-=_+/?.:;[]{}\\|"
      },
      "result": "YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXogQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVogMTIzNDU2Nzg5MCAhQCMkJV4mKigpLT1fKy8/Ljo7W117fVx8"
    },
    {
      "name": "filters, base64 encode, not a string",
      "template": "{{ 5 | base64_encode }}",
      "result": "NQ=="
    },
    {
      "name": "filters, base64 encode, unexpected argument",
      "template": "{{ \"hello\" | base64_encode: 5 }}",
      "invalid": true
    },
    {
      "name": "filters, base64 encode, undefined left value",
      "template": "{{ nosuchthing | base64_encode }}",
      "result": ""
    },
    {
      "name": "filters, base64 url safe decode, from string",
      "template": "{{ \"XyMvLg==\" | base64_url_safe_decode }}",
      "result": "_#/."
    },
    {
      "name": "filters, base64 url safe decode, from string with URL unsafe",
      "template": "{{ a | base64_url_safe_decode }}",
      "data": {
        "a": "YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXogQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVogMTIzNDU2Nzg5MCAhQCMkJV4mKigpLT1fKy8_Ljo7W117fVx8"
      },
      "result": "abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ 1234567890 !@#$%^&*()-=_+/?.:;[]{}\\|"
    },
    {
      "name": "filters, base64 url safe decode, not a string",
      "template": "{{ 5 | base64_url_safe_decode }}",
      "invalid": true
    },
    {
      "name": "filters, base64 url safe decode, unexpected argument",
      "template": "{{ \"hello\" | base64_url_safe_decode: 5 }}",
      "invalid": true
    },
    {
      "name": "filters, base64 url safe decode, undefined left value",
      "template": "{{ nosuchthing | base64_url_safe_decode }}",
      "result": ""
    },
    {
      "name": "filters, base64 url safe encode, from string",
      "template": "{{ \"_#/.\" | base64_url_safe_encode }}",
      "result": "XyMvLg=="
    },
    {
      "name": "filters, base64 url safe encode, from string with URL unsafe",
      "template": "{{ a | base64_url_safe_encode }}",
      "data": {
        "a": "abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ 1234567890 !@#$%^&*()-=_+/?.:;[]{}\\|"
      },
      "result": "YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXogQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVogMTIzNDU2Nzg5MCAhQCMkJV4mKigpLT1fKy8_Ljo7W117fVx8"
    },
    {
      "name": "filters, base64 url safe encode, not a string",
      "template": "{{ 5 | base64_url_safe_encode }}",
      "result": "NQ=="
    },
    {
      "name": "filters, base64 url safe encode, unexpected argument",
      "template": "{{ \"hello\" | base64_url_safe_encode: 5 }}",
      "invalid": true
    },
    {
      "name": "filters, base64 url safe encode, undefined left value",
      "template": "{{ nosuchthing | base64_url_safe_encode }}",
      "result": ""
    },
    {
      "name": "filters, capitalize, lower case string",
      "template": "{{ \"hello\" | capitalize }}",
      "result": "Hello"
    },
    {
      "name": "filters, capitalize, already capitalized string",
      "template": "{{ \"Hello\" | capitalize }}",
      "result": "Hello"
    },
    {
      "name": "filters, capitalize, unexpected argument",
      "template": "{{ \"hello\" | capitalize: 2 }}",
      "invalid": true
    },
    {
      "name": "filters, capitalize, undefined left value",
      "template": "{{ nosuchthing | capitalize }}",
      "result": ""
    },
    {
      "name": "filters, ceil, positive integer",
      "template": "{{ 5 | ceil }}",
      "result": "5"
    },
    {
      "name": "filters, ceil, negative integer",
      "template": "{{ -5 | ceil }}",
      "result": "-5"
    },
    {
      "name": "filters, ceil, positive float",
      "template": "{{ 5.4 | ceil }}",
      "result": "6"
    },
    {
      "name": "filters, ceil, negative float",
      "template": "{{ -5.4 | ceil }}",
      "result": "-5"
    },
    {
      "name": "filters, ceil, zero",
      "template": "{{ 0 | ceil }}",
      "result": "0"
    },
    {
      "name": "filters, ceil, positive string float",
      "template": "{{ \"5.1\" | ceil }}",
      "result": "6"
    },
    {
      "name": "filters, ceil, negative string float",
      "template": "{{ \"-5.1\" | ceil }}",
      "result": "-5"
    },
    {
      "name": "filters, ceil, unexpected argument",
      "template": "{{ -3.1 | ceil: 1 }}",
      "invalid": true
    },
    {
      "name": "filters, ceil, string not a number",
      "template": "{{ \"hello\" | ceil }}",
      "result": "0"
    },
    {
      "name": "filters, ceil, not a string, int or float",
      "template": "{{ a | ceil }}",
      "data": {
        "a": {}
      },
      "result": "0"
    },
    {
      "name": "filters, ceil, undefined left value",
      "template": "{{ nosuchthing | ceil }}",
      "result": "0"
    },
    {
      "name": "filters, compact, array with a nil",
      "template": "{{ a | compact | join: '#' }}",
      "data": {
        "a": [
          "b",
          "a",
          null,
          "A"
        ]
      },
      "result": "b#a#A"
    },
    {
      "name": "filters, compact, empty array",
      "template": "{{ a | compact | join: '#' }}",
      "data": {
        "a": []
      },
      "result": ""
    },
    {
      "name": "filters, compact, too many arguments",
      "template": "{{ a | compact: 'foo', 'bar' }}",
      "invalid": true
    },
    {
      "name": "filters, compact, left value is not an array",
      "template": "{{ a | compact | first }}",
      "data": {
        "a": 123
      },
      "result": "123"
    },
    {
      "name": "filters, compact, left value is undefined",
      "template": "{{ nosuchthing | compact }}",
      "result": ""
    },
    {
      "name": "filters, compact, array of objects with key property",
      "template": "{% assign x = a | compact: 'title' %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": "foo",
            "name": "a"
          },
          {
            "title": null,
            "name": "b"
          },
          {
            "title": "bar",
            "name": "c"
          }
        ]
      },
      "result": "(title,foo)(name,a)(title,bar)(name,c)"
    },
    {
      "name": "filters, concat, range literal concat filter left value",
      "template": "{{ (1..3) | concat: foo | join: '#' }}",
      "data": {
        "foo": [
          5,
          6,
          7
        ]
      },
      "result": "1#2#3#5#6#7"
    },
    {
      "name": "filters, concat, two arrays of strings",
      "template": "{{ a | concat: b | join: '#' }}",
      "data": {
        "a": [
          "a",
          "b"
        ],
        "b": [
          "c",
          "d"
        ]
      },
      "result": "a#b#c#d"
    },
    {
      "name": "filters, concat, missing argument is an error",
      "template": "{{ a | concat | join: '#' }}",
      "data": {
        "a": [
          "a",
          "b"
        ]
      },
      "invalid": true
    },
    {
      "name": "filters, concat, non array-like argument is an error",
      "template": "{{ a | concat: b | join: '#' }}",
      "data": {
        "a": [
          "a",
          "b"
        ],
        "b": 5
      },
      "invalid": true
    },
    {
      "name": "filters, concat, left value is not array-like",
      "template": "{{ a | concat: b | join: '#' }}",
      "data": {
        "a": "ab",
        "b": [
          "c",
          "d"
        ]
      },
      "result": "ab#c#d"
    },
    {
      "name": "filters, concat, left value contains non string",
      "template": "{{ a | concat: b | join: '#' }}",
      "data": {
        "a": [
          "a",
          "b",
          5
        ],
        "b": [
          "c",
          "d"
        ]
      },
      "result": "a#b#5#c#d"
    },
    {
      "name": "filters, concat, undefined left value",
      "template": "{{ nosuchthing | concat: b | join: '#' }}",
      "data": {
        "b": [
          "c",
          "d"
        ]
      },
      "result": "c#d"
    },
    {
      "name": "filters, concat, undefined argument is an error",
      "template": "{{ a | concat: nosuchthing | join: '#' }}",
      "data": {
        "a": [
          "a",
          "b"
        ]
      },
      "invalid": true
    },
    {
      "name": "filters, concat, nested left value gets flattened",
      "template": "{{ a | concat: b | join: '#' }}",
      "data": {
        "a": [
          [
            "a",
            "x"
          ],
          [
            "b",
            [
              "y",
              [
                "z"
              ]
            ]
          ]
        ],
        "b": [
          "c",
          "d"
        ]
      },
      "result": "a#x#b#y#z#c#d"
    },
    {
      "name": "filters, date, well formed string",
      "template": "{{ 'March 14, 2016' | date: '%b %d, %y' }}",
      "result": "Mar 14, 16"
    },
    {
      "name": "filters, date, too many arguments",
      "template": "{{ 'March 14, 2016' | date: '%b %d, %y', 'foo' }}",
      "invalid": true
    },
    {
      "name": "filters, date, undefined left value",
      "template": "{{ nosuchthing | date: '%b %d, %y' }}",
      "result": ""
    },
    {
      "name": "filters, date, missing argument",
      "template": "{{ 'March 14, 2016' | date }}",
      "invalid": true
    },
    {
      "name": "filters, date, undefined argument",
      "template": "{{ 'March 14, 2016' | date: nosuchthing }}",
      "result": "March 14, 2016"
    },
    {
      "name": "filters, date, literal percent",
      "template": "{{ 'March 14, 2016' | date: '%%%b %d, %y' }}",
      "result": "%Mar 14, 16"
    },
    {
      "name": "filters, date, timestamp integer",
      "template": "{{ 1152098955 | date: '%m/%d/%Y' }}",
      "result": "07/05/2006"
    },
    {
      "name": "filters, date, timestamp string",
      "template": "{{ '1152098955' | date: '%m/%d/%Y' }}",
      "result": "07/05/2006"
    },
    {
      "name": "filters, date, negative timestamp string",
      "template": "{{ '-1152098955' | date: '%m/%d/%Y' }}",
      "result": "-1152098955"
    },
    {
      "name": "filters, date, seconds since epoch format directive",
      "template": "{{ 'March 14, 2016' | date: '%s' }}",
      "result": "1457913600"
    },
    {
      "name": "filters, default, nil",
      "template": "{{ nil | default: 'foo' }}",
      "result": "foo"
    },
    {
      "name": "filters, default, false",
      "template": "{{ False | default: 'foo' }}",
      "result": "foo"
    },
    {
      "name": "filters, default, empty string",
      "template": "{{ \"\" | default: \"foo\" }}",
      "result": "foo"
    },
    {
      "name": "filters, default, empty array",
      "template": "{{ a | default: 'foo' }}",
      "data": {
        "a": []
      },
      "result": "foo"
    },
    {
      "name": "filters, default, empty object",
      "template": "{{ a | default: 'foo' }}",
      "data": {
        "a": {}
      },
      "result": "foo"
    },
    {
      "name": "filters, default, not empty string",
      "template": "{{ \"hello\" | default: \"foo\" }}",
      "result": "hello"
    },
    {
      "name": "filters, default, not empty list",
      "template": "{{ a | default: \"foo\" | join: \"#\" }}",
      "data": {
        "a": [
          "hello",
          "world"
        ]
      },
      "result": "hello#world"
    },
    {
      "name": "filters, default, not empty object",
      "template": "{% assign b = a | default: foo %}{% for item in b %}({{ item[0] }},{{ item[1] }}){% endfor %}",
      "data": {
        "a": {
          "greeting": "hello"
        },
        "foo": {
          "greeting": "goodbye"
        }
      },
      "result": "(greeting,hello)"
    },
    {
      "name": "filters, default, too many arguments",
      "template": "{{ None | default: 'foo', 'bar', 'baz' }}",
      "invalid": true
    },
    {
      "name": "filters, default, missing argument",
      "template": "{{ false | default }}",
      "result": ""
    },
    {
      "name": "filters, default, empty",
      "template": "{{ empty | default: bar }}",
      "result": ""
    },
    {
      "name": "filters, default, allow false",
      "template": "{{ false | default: 'bar', allow_false:true }}",
      "result": "false"
    },
    {
      "name": "filters, default, allow false from context",
      "template": "{{ false | default: 'bar', allow_false:foo }}",
      "data": {
        "foo": true
      },
      "result": "false"
    },
    {
      "name": "filters, default, undefined left value",
      "template": "{{ nosuchthing | default: \"bar\" }}",
      "result": "bar"
    },
    {
      "name": "filters, default, true keyword argument before positional",
      "template": "{{ false | default: allow_false: true, \"bar\" }}",
      "result": "false"
    },
    {
      "name": "filters, default, false keyword argument before positional",
      "template": "{{ false | default: allow_false: false, \"bar\" }}",
      "result": "bar"
    },
    {
      "name": "filters, default, zero is not falsy",
      "template": "{{ 0 | default: \"bar\" }}",
      "result": "0"
    },
    {
      "name": "filters, default, zero is not falsy with allow_false",
      "template": "{{ 0 | default: \"bar\", allow_false: true }}",
      "result": "0"
    },
    {
      "name": "filters, default, 0.0 is not falsy",
      "template": "{{ 0.0 | default: \"bar\" }}",
      "result": "0.0"
    },
    {
      "name": "filters, divided by, integer value and integer arg",
      "template": "{{ 10 | divided_by: 2 }}",
      "result": "5"
    },
    {
      "name": "filters, divided by, integer value and float arg",
      "template": "{{ 10 | divided_by: 2.0 }}",
      "result": "5.0"
    },
    {
      "name": "filters, divided by, integer division",
      "template": "{{ 9 | divided_by: 2 }}",
      "result": "4"
    },
    {
      "name": "filters, divided by, float value and integer arg",
      "template": "{{ 9.0 | divided_by: 2 }}",
      "result": "4.5"
    },
    {
      "name": "filters, divided by, float division",
      "template": "{{ 20 | divided_by: 7.0 }}",
      "result": "2.857142857142857"
    },
    {
      "name": "filters, divided by, string value and argument",
      "template": "{{ \"10\" | divided_by: \"2\" }}",
      "result": "5"
    },
    {
      "name": "filters, divided by, string not a number",
      "template": "{{ \"foo\" | divided_by: \"2\" }}",
      "result": "0"
    },
    {
      "name": "filters, divided by, arg string not a number",
      "template": "{{ \"10\" | divided_by: \"foo\" }}",
      "invalid": true
    },
    {
      "name": "filters, divided by, too many args",
      "template": "{{ 5 | divided_by: 1, '5' }}",
      "invalid": true
    },
    {
      "name": "filters, divided by, not a string, int or float",
      "template": "{{ a | divided_by: 1 }}",
      "data": {
        "a": {}
      },
      "result": "0"
    },
    {
      "name": "filters, divided by, undefined left value",
      "template": "{{ nosuchthing | divided_by: 2 }}",
      "result": "0"
    },
    {
      "name": "filters, divided by, undefined argument",
      "template": "{{ 10 | divided_by: nosuchthing }}",
      "invalid": true
    },
    {
      "name": "filters, divided by, divied by zero",
      "template": "{{ 10 | divided_by: 0 }}",
      "invalid": true
    },
    {
      "name": "filters, divided by, zero divided by float",
      "template": "{{ 0 | divided_by: 1.1 }}",
      "result": "0.0"
    },
    {
      "name": "filters, divided by, zero divided by integer",
      "template": "{{ 0 | divided_by: 1 }}",
      "result": "0"
    },
    {
      "name": "filters, divided by, issue",
      "template": "{{ 5 | divided_by: 3 }}",
      "result": "1"
    },
    {
      "name": "filters, divided by, render",
      "template": "{{ 5.0 }} {{ 5 }}",
      "result": "5.0 5"
    },
    {
      "name": "filters, divided by, left value is an empty string",
      "template": "{{ '' | divided_by: 2 }}",
      "result": "0"
    },
    {
      "name": "filters, downcase, make lower case",
      "template": "{{ \"HELLO\" | downcase }}",
      "result": "hello"
    },
    {
      "name": "filters, downcase, not a string",
      "template": "{{ 5 | downcase }}",
      "result": "5"
    },
    {
      "name": "filters, downcase, unexpected argument",
      "template": "{{ \"HELLO\" | downcase: 5 }}",
      "invalid": true
    },
    {
      "name": "filters, downcase, undefined left value",
      "template": "{{ nosuchthing | downcase }}",
      "result": ""
    },
    {
      "name": "filters, escape, make HTML-safe",
      "template": "{{ \"<p>test</p>\" | escape }}",
      "result": "&lt;p&gt;test&lt;/p&gt;"
    },
    {
      "name": "filters, escape, not a string",
      "template": "{{ 5 | escape }}",
      "result": "5"
    },
    {
      "name": "filters, escape, unexpected argument",
      "template": "{{ \"HELLO\" | escape: 5 }}",
      "invalid": true
    },
    {
      "name": "filters, escape, undefined left value",
      "template": "{{ nosuchthing | escape }}",
      "result": ""
    },
    {
      "name": "filters, escape once, make HTML-safe",
      "template": "{{ \"&lt;p&gt;test&lt;/p&gt;\" | escape_once }}",
      "result": "&lt;p&gt;test&lt;/p&gt;"
    },
    {
      "name": "filters, escape once, make HTML-safe from mixed safe and markup.",
      "template": "{{ \"&lt;p&gt;test&lt;/p&gt;<p>test</p>\" | escape_once }}",
      "result": "&lt;p&gt;test&lt;/p&gt;&lt;p&gt;test&lt;/p&gt;"
    },
    {
      "name": "filters, escape once, not a string",
      "template": "{{ 5 | escape_once }}",
      "result": "5"
    },
    {
      "name": "filters, escape once, unexpected argument",
      "template": "{{ \"HELLO\" | escape_once: 5 }}",
      "invalid": true
    },
    {
      "name": "filters, escape once, undefined left value",
      "template": "{{ nosuchthing | escape_once }}",
      "result": ""
    },
    {
      "name": "filters, find, array of strings, default value",
      "template": "{{ a | find: 'z' }}",
      "data": {
        "a": [
          "x",
          "y",
          "z"
        ]
      },
      "result": "z"
    },
    {
      "name": "filters, find, array of strings, substring match, default value",
      "template": "{{ a | find: 'oo' }}",
      "data": {
        "a": [
          "x",
          "y",
          "zoo"
        ]
      },
      "result": "zoo"
    },
    {
      "name": "filters, find, array of strings, default value, no match",
      "template": "{{ a | find: 'foo' }}",
      "data": {
        "a": [
          "x",
          "y",
          "zoo"
        ]
      },
      "result": ""
    },
    {
      "name": "filters, find, mixed array, default value",
      "template": "{{ a | find: 'z' }}",
      "data": {
        "a": [
          "x",
          null,
          "z",
          false,
          true
        ]
      },
      "result": ""
    },
    {
      "name": "filters, find, string input, default value, match",
      "template": "{{ a | find: 'z' }}",
      "data": {
        "a": "zoo"
      },
      "result": "zoo"
    },
    {
      "name": "filters, find, string input, string value, match",
      "template": "{{ a | find: 'z', 'z' }}",
      "data": {
        "a": "zoo"
      },
      "result": "zoo"
    },
    {
      "name": "filters, find, string input, string value, no match",
      "template": "{{ a | find: 'z', 'y' }}",
      "data": {
        "a": "zoo"
      },
      "result": ""
    },
    {
      "name": "filters, find, hash input, default value, match",
      "template": "{% assign b = a | find: 'z' %}{{ b.z }}",
      "data": {
        "a": {
          "z": 42
        }
      },
      "result": "42"
    },
    {
      "name": "filters, find, hash input, default value, no match",
      "template": "{% assign b = a | find: 'foo' %}{{ b }}",
      "data": {
        "a": {
          "z": 42
        }
      },
      "result": ""
    },
    {
      "name": "filters, find, hash input, int value, match",
      "template": "{% assign b = a | find: 'z', 42 %}{{ b.z }}",
      "data": {
        "a": {
          "z": 42
        }
      },
      "result": "42"
    },
    {
      "name": "filters, find, hash input, explicit nil, match",
      "template": "{% assign b = a | find: 'z', nil %}{{ b.z }}",
      "data": {
        "a": {
          "z": null
        }
      },
      "result": ""
    },
    {
      "name": "filters, find, array of hashes, int value, match",
      "template": "{% assign b = a | find: 'z', 42 %}{{ b.foo }}",
      "data": {
        "a": [
          {
            "x": 99
          },
          {
            "z": 42,
            "foo": "bar"
          }
        ]
      },
      "result": "bar"
    },
    {
      "name": "filters, find, array of hashes, with a nil",
      "template": "{% assign b = a | find: 'z', 42 %}{{ b.foo }}",
      "data": {
        "a": [
          {
            "x": 99
          },
          null,
          {
            "z": 42,
            "foo": "bar"
          }
        ]
      },
      "result": ""
    },
    {
      "name": "filters, find index, array of strings, default value",
      "template": "{{ a | find_index: 'z' }}",
      "data": {
        "a": [
          "x",
          "y",
          "z"
        ]
      },
      "result": "2"
    },
    {
      "name": "filters, find index, array of strings, substring match, default value",
      "template": "{{ a | find_index: 'oo' }}",
      "data": {
        "a": [
          "x",
          "y",
          "zoo"
        ]
      },
      "result": "2"
    },
    {
      "name": "filters, find index, array of strings, default value, no match",
      "template": "{{ a | find_index: 'foo' }}",
      "data": {
        "a": [
          "x",
          "y",
          "zoo"
        ]
      },
      "result": ""
    },
    {
      "name": "filters, find index, mixed array, default value",
      "template": "{{ a | find_index: 'z' }}",
      "data": {
        "a": [
          "x",
          null,
          "z",
          false,
          true
        ]
      },
      "result": ""
    },
    {
      "name": "filters, find index, string input, default value, match",
      "template": "{{ a | find_index: 'z' }}",
      "data": {
        "a": "zoo"
      },
      "result": "0"
    },
    {
      "name": "filters, find index, string input, string value, match",
      "template": "{{ a | find_index: 'z', 'z' }}",
      "data": {
        "a": "zoo"
      },
      "result": "0"
    },
    {
      "name": "filters, find index, string input, string value, no match",
      "template": "{{ a | find_index: 'z', 'y' }}",
      "data": {
        "a": "zoo"
      },
      "result": ""
    },
    {
      "name": "filters, find index, hash input, default value, match",
      "template": "{{ a | find_index: 'z' }}",
      "data": {
        "a": {
          "z": 42
        }
      },
      "result": "0"
    },
    {
      "name": "filters, find index, hash input, default value, no match",
      "template": "{{ a | find_index: 'foo' }}",
      "data": {
        "a": {
          "z": 42
        }
      },
      "result": ""
    },
    {
      "name": "filters, find index, hash input, int value, match",
      "template": "{{ a | find_index: 'z', 42 }}",
      "data": {
        "a": {
          "z": 42
        }
      },
      "result": "0"
    },
    {
      "name": "filters, find index, hash input, explicit nil, match",
      "template": "{{ a | find_index: 'z', nil }}",
      "data": {
        "a": {
          "z": null
        }
      },
      "result": ""
    },
    {
      "name": "filters, find index, array of hashes, explicit nil, match",
      "template": "{{ a | find_index: 'z', nil }}",
      "data": {
        "a": [
          "foo",
          "bar",
          {
            "z": null
          }
        ]
      },
      "result": ""
    },
    {
      "name": "filters, find index, array of hashes, int value, match",
      "template": "{{ a | find_index: 'z', 42 }}",
      "data": {
        "a": [
          {
            "x": 99
          },
          {
            "z": 42,
            "foo": "bar"
          }
        ]
      },
      "result": "1"
    },
    {
      "name": "filters, find index, array of hashes, with a nil",
      "template": "{% assign b = a | find_index: 'z', 42 %}{{ b.foo }}",
      "data": {
        "a": [
          {
            "x": 99
          },
          null,
          {
            "z": 42,
            "foo": "bar"
          }
        ]
      },
      "result": ""
    },
    {
      "name": "filters, first, range literal first filter left value",
      "template": "{{ (1..3) | first }}",
      "result": "1"
    },
    {
      "name": "filters, first, array of strings",
      "template": "{{ arr | first }}",
      "data": {
        "arr": [
          "a",
          "b"
        ]
      },
      "result": "a"
    },
    {
      "name": "filters, first, array of things",
      "template": "{{ arr | first }}",
      "data": {
        "arr": [
          "a",
          "b",
          1,
          [],
          {}
        ]
      },
      "result": "a"
    },
    {
      "name": "filters, first, empty left value",
      "template": "{{ arr | first }}",
      "data": {
        "arr": []
      },
      "result": ""
    },
    {
      "name": "filters, first, left value is not an array",
      "template": "{{ arr | first }}",
      "data": {
        "arr": 12
      },
      "result": ""
    },
    {
      "name": "filters, first, left value is undefined",
      "template": "{{ nosuchthing | first }}",
      "result": ""
    },
    {
      "name": "filters, first, first of a string",
      "template": "{{ 'hello' | first }}",
      "results": [
        "",
        "h"
      ]
    },
    {
      "name": "filters, first, first of a hash",
      "template": "{% assign x = a | first %}({{ x[0] }},{{ x[1] }})",
      "data": {
        "a": {
          "b": 1,
          "c": 2
        }
      },
      "result": "(b,1)"
    },
    {
      "name": "filters, floor, positive integer",
      "template": "{{ 5 | floor }}",
      "result": "5"
    },
    {
      "name": "filters, floor, negative integer",
      "template": "{{ -5 | floor }}",
      "result": "-5"
    },
    {
      "name": "filters, floor, positive float",
      "template": "{{ 5.4 | floor }}",
      "result": "5"
    },
    {
      "name": "filters, floor, negative float",
      "template": "{{ -5.4 | floor }}",
      "result": "-6"
    },
    {
      "name": "filters, floor, zero",
      "template": "{{ 0 | floor }}",
      "result": "0"
    },
    {
      "name": "filters, floor, positive string float",
      "template": "{{ \"5.1\" | floor }}",
      "result": "5"
    },
    {
      "name": "filters, floor, negative string float",
      "template": "{{ \"-5.1\" | floor }}",
      "result": "-6"
    },
    {
      "name": "filters, floor, unexpected argument",
      "template": "{{ -3.1 | floor: 1 }}",
      "invalid": true
    },
    {
      "name": "filters, floor, string not a number",
      "template": "{{ \"hello\" | floor }}",
      "result": "0"
    },
    {
      "name": "filters, floor, not a string, int or float",
      "template": "{{ a | floor }}",
      "data": {
        "a": {}
      },
      "result": "0"
    },
    {
      "name": "filters, floor, undefined left value",
      "template": "{{ nosuchthing | floor }}",
      "result": "0"
    },
    {
      "name": "filters, has, array of strings, default value",
      "template": "{{ a | has: 'z' }}",
      "data": {
        "a": [
          "x",
          "y",
          "z"
        ]
      },
      "result": "true"
    },
    {
      "name": "filters, has, array of strings, default value, substring match",
      "template": "{{ a | has: 'z' }}",
      "data": {
        "a": [
          "x",
          "y",
          "zoo"
        ]
      },
      "result": "true"
    },
    {
      "name": "filters, has, array of strings, default value, no match",
      "template": "{{ a | has: ':(' }}",
      "data": {
        "a": [
          "x",
          "y",
          "z"
        ]
      },
      "result": "false"
    },
    {
      "name": "filters, has, array of ints, default value",
      "template": "{{ a | has: 2 }}",
      "data": {
        "a": [
          1,
          2,
          3
        ]
      },
      "invalid": true
    },
    {
      "name": "filters, has, array of ints, string argument, default value",
      "template": "{{ a | has: '2' }}",
      "data": {
        "a": [
          1,
          2,
          3
        ]
      },
      "invalid": true
    },
    {
      "name": "filters, has, mixed array, default value",
      "template": "{{ a | has: 'z' }}",
      "data": {
        "a": [
          "x",
          null,
          "z",
          false,
          true
        ]
      },
      "result": ""
    },
    {
      "name": "filters, has, string input, default value, match",
      "template": "{{ a | has: 'z' }}",
      "data": {
        "a": "zoo"
      },
      "result": "true"
    },
    {
      "name": "filters, has, string input, default value, no match",
      "template": "{{ a | has: 'z' }}",
      "data": {
        "a": "foo"
      },
      "result": "false"
    },
    {
      "name": "filters, has, hash input, default value, match",
      "template": "{{ a | has: 'z' }}",
      "data": {
        "a": {
          "z": 42
        }
      },
      "result": "true"
    },
    {
      "name": "filters, has, hash input, default value, no match",
      "template": "{{ a | has: 'z' }}",
      "data": {
        "a": {
          "x": 42
        }
      },
      "result": "false"
    },
    {
      "name": "filters, has, hash input, int value, match",
      "template": "{{ a | has: 'z', 42 }}",
      "data": {
        "a": {
          "z": 42
        }
      },
      "result": "true"
    },
    {
      "name": "filters, has, hash input, int value, no match",
      "template": "{{ a | has: 'z', 99 }}",
      "data": {
        "a": {
          "z": 42
        }
      },
      "result": "false"
    },
    {
      "name": "filters, has, hash input, string value, no type coercion",
      "template": "{{ a | has: 'z', '42' }}",
      "data": {
        "a": {
          "z": 42
        }
      },
      "result": "false"
    },
    {
      "name": "filters, has, hash input, explicit nil, no match",
      "template": "{{ a | has: 'z', nil }}",
      "data": {
        "a": {
          "z": 42
        }
      },
      "result": "true"
    },
    {
      "name": "filters, has, hash input, explicit nil, match",
      "template": "{{ a | has: 'z', nil }}",
      "data": {
        "a": {
          "z": null
        }
      },
      "result": "false"
    },
    {
      "name": "filters, has, hash input, false value, match",
      "template": "{{ a | has: 'z', false }}",
      "data": {
        "a": {
          "z": false
        }
      },
      "result": "true"
    },
    {
      "name": "filters, has, array of hashes, int value, match",
      "template": "{{ a | has: 'z', 42 }}",
      "data": {
        "a": [
          {
            "x": 99
          },
          {
            "z": 42
          }
        ]
      },
      "result": "true"
    },
    {
      "name": "filters, has, array of hashes, int value, no match",
      "template": "{{ a | has: 'z', 7 }}",
      "data": {
        "a": [
          {
            "x": 99
          },
          {
            "z": 42
          }
        ]
      },
      "result": "false"
    },
    {
      "name": "filters, has, array of hashes, with a nil",
      "template": "{{ a | has: 'z', 42 }}",
      "data": {
        "a": [
          {
            "x": 99
          },
          null,
          {
            "z": 42
          }
        ]
      },
      "result": ""
    },
    {
      "name": "filters, has, array of hashes, nil property",
      "template": "{{ a | has: nil }}",
      "data": {
        "a": [
          {
            "x": 99
          },
          {
            "z": 42
          }
        ]
      },
      "result": "false"
    },
    {
      "name": "filters, has, array of hashes, int property",
      "template": "{{ a | has: 42 }}",
      "data": {
        "a": [
          {
            "x": 99
          },
          {
            "z": 42
          }
        ]
      },
      "result": "false"
    },
    {
      "name": "filters, has, array of hashes, false property",
      "template": "{{ a | has: false }}",
      "data": {
        "a": [
          {
            "x": 99
          },
          {
            "z": 42
          }
        ]
      },
      "result": "false"
    },
    {
      "name": "filters, join, range literal join filter left value",
      "template": "{{ (1..3) | join: '#' }}",
      "result": "1#2#3"
    },
    {
      "name": "filters, join, joining a string is a noop",
      "template": "{{ 'a,b' | join: '#' }}",
      "result": "a,b"
    },
    {
      "name": "filters, join, joining an int is a noop",
      "template": "{{ 123 | join: '#' }}",
      "result": "123"
    },
    {
      "name": "filters, join, join an array of strings",
      "template": "{{ arr | join: '#' }}",
      "data": {
        "arr": [
          "a",
          "b"
        ]
      },
      "result": "a#b"
    },
    {
      "name": "filters, join, join an array of integers",
      "template": "{{ arr | join: '#' }}",
      "data": {
        "arr": [
          1,
          2
        ]
      },
      "result": "1#2"
    },
    {
      "name": "filters, join, missing argument defaults to a space",
      "template": "{{ arr | join }}",
      "data": {
        "arr": [
          "a",
          "b"
        ]
      },
      "result": "a b"
    },
    {
      "name": "filters, join, argument is not a string",
      "template": "{{ arr | join: 5 }}",
      "data": {
        "arr": [
          "a",
          "b"
        ]
      },
      "result": "a5b"
    },
    {
      "name": "filters, join, left value contains non string",
      "template": "{{ arr | join: '#' }}",
      "data": {
        "arr": [
          "a",
          "b",
          1
        ]
      },
      "result": "a#b#1"
    },
    {
      "name": "filters, join, undefined left value",
      "template": "{{ nosuchthing | join: '#' }}",
      "result": ""
    },
    {
      "name": "filters, join, undefined argument",
      "template": "{{ arr | join: nosuchthing }}",
      "data": {
        "arr": [
          "a",
          "b"
        ]
      },
      "result": "ab"
    },
    {
      "name": "filters, join, too many arguments",
      "template": "{{ arr | join: '#', 42 }}",
      "data": {
        "arr": [
          "a",
          "b"
        ]
      },
      "invalid": true
    },
    {
      "name": "filters, last, range literal last filter left value",
      "template": "{{ (1..3) | last }}",
      "result": "3"
    },
    {
      "name": "filters, last, array of strings",
      "template": "{{ arr | last }}",
      "data": {
        "arr": [
          "a",
          "b"
        ]
      },
      "result": "b"
    },
    {
      "name": "filters, last, array of things",
      "template": "{{ arr | last }}",
      "data": {
        "arr": [
          "a",
          "b",
          1,
          [],
          {}
        ]
      },
      "result": "{}"
    },
    {
      "name": "filters, last, empty array",
      "template": "{{ arr | last }}",
      "data": {
        "arr": []
      },
      "result": ""
    },
    {
      "name": "filters, last, left value not an array",
      "template": "{{ arr | last }}",
      "data": {
        "arr": 12
      },
      "result": ""
    },
    {
      "name": "filters, last, left value is undefined",
      "template": "{{ nosuchthing | last }}",
      "result": ""
    },
    {
      "name": "filters, last, last of a string",
      "template": "{{ 'hello' | last }}",
      "results": [
        "",
        "o"
      ]
    },
    {
      "name": "filters, last, last of a hash",
      "template": "{{ a | last }}",
      "data": {
        "a": {
          "b": 1,
          "c": 2
        }
      },
      "result": ""
    },
    {
      "name": "filters, lstrip, left padded",
      "template": "{{ \" \t\r\n  hello\" | lstrip }}",
      "result": "hello"
    },
    {
      "name": "filters, lstrip, right padded",
      "template": "{{ \"hello \t\r\n  \" | lstrip }}",
      "result": "hello \t\r\n  "
    },
    {
      "name": "filters, lstrip, left and right padded",
      "template": "{{ \" \t\r\n  hello  \t\r\n \" | lstrip }}",
      "result": "hello  \t\r\n "
    },
    {
      "name": "filters, lstrip, not a string",
      "template": "{{ 5 | lstrip }}",
      "result": "5"
    },
    {
      "name": "filters, lstrip, unexpected argument",
      "template": "{{ \"hello\" | lstrip: 5 }}",
      "invalid": true
    },
    {
      "name": "filters, lstrip, undefined left value",
      "template": "{{ nosuchthing | lstrip }}",
      "result": ""
    },
    {
      "name": "filters, map, array of objects",
      "template": "{{ a | map: 'title' | join: '#' }}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          },
          {
            "title": "baz"
          }
        ]
      },
      "result": "foo#bar#baz"
    },
    {
      "name": "filters, map, missing property",
      "template": "{{ a | map: 'title' | join: '#' }}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          },
          {
            "heading": "baz"
          }
        ]
      },
      "result": "foo#bar#"
    },
    {
      "name": "filters, map, left value not an array",
      "template": "{{ a | map: 'title' | join: '#' }}",
      "data": {
        "a": 123
      },
      "invalid": true
    },
    {
      "name": "filters, map, array containing a non object",
      "template": "{{ a | map: 'title' | join: '#' }}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          },
          5,
          []
        ]
      },
      "invalid": true
    },
    {
      "name": "filters, map, undefined argument",
      "template": "{{ a | map: nosuchthing | join: '#' }}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          }
        ]
      },
      "result": "#"
    },
    {
      "name": "filters, map, nested arrays get flattened",
      "template": "{{ a | map: 'title' | join: '#' }}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          [
            {
              "title": "bar"
            },
            {
              "title": "baz"
            }
          ]
        ]
      },
      "result": "foo#bar#baz"
    },
    {
      "name": "filters, map, input is a hash",
      "template": "{{ a | map: 'title' | join: '#' }}",
      "data": {
        "a": {
          "title": "foo",
          "some": "thing"
        }
      },
      "result": "foo"
    },
    {
      "name": "filters, minus, integer value and integer arg",
      "template": "{{ 10 | minus: 2 }}",
      "result": "8"
    },
    {
      "name": "filters, minus, integer value and float arg",
      "template": "{{ 10 | minus: 2.0 }}",
      "result": "8.0"
    },
    {
      "name": "filters, minus, float value and float arg",
      "template": "{{ 10.1 | minus: 2.2 }}",
      "result": "7.9"
    },
    {
      "name": "filters, minus, string value and string arg",
      "template": "{{ \"10.1\" | minus: \"2.2\" }}",
      "result": "7.9"
    },
    {
      "name": "filters, minus, string not a number",
      "template": "{{ \"foo\" | minus: \"2.0\" }}",
      "result": "-2.0"
    },
    {
      "name": "filters, minus, arg string not a number",
      "template": "{{ \"10\" | minus: \"foo\" }}",
      "result": "10"
    },
    {
      "name": "filters, minus, too many args",
      "template": "{{ 5 | minus: 1, '5' }}",
      "invalid": true
    },
    {
      "name": "filters, minus, not a string, int or float",
      "template": "{{ a | minus: 1 }}",
      "data": {
        "a": {}
      },
      "result": "-1"
    },
    {
      "name": "filters, minus, undefined left value",
      "template": "{{ nosuchthing | minus: 2 }}",
      "result": "-2"
    },
    {
      "name": "filters, minus, undefined argument",
      "template": "{{ 10 | minus: nosuchthing }}",
      "result": "10"
    },
    {
      "name": "filters, modulo, integer value and integer arg",
      "template": "{{ 10 | modulo: 2 }}",
      "result": "0"
    },
    {
      "name": "filters, modulo, integer value and float arg",
      "template": "{{ 10 | modulo: 2.0 }}",
      "result": "0.0"
    },
    {
      "name": "filters, modulo, float value and float arg",
      "template": "{{ 10.1 | modulo: 7.0 }}",
      "result": "3.1"
    },
    {
      "name": "filters, modulo, string value and argument",
      "template": "{{ \"10\" | modulo: \"2.0\" }}",
      "result": "0.0"
    },
    {
      "name": "filters, modulo, string not a number",
      "template": "{{ \"foo\" | modulo: \"2.0\" }}",
      "result": "0.0"
    },
    {
      "name": "filters, modulo, arg string not a number",
      "template": "{{ \"10\" | modulo: \"foo\" }}",
      "invalid": true
    },
    {
      "name": "filters, modulo, too many args",
      "template": "{{ 5 | modulo: 1, '5' }}",
      "invalid": true
    },
    {
      "name": "filters, modulo, not a string, int or float",
      "template": "{{ a | modulo: 1 }}",
      "data": {
        "a": {}
      },
      "result": "0"
    },
    {
      "name": "filters, modulo, undefined left value",
      "template": "{{ nosuchthing | modulo: 2 }}",
      "result": "0"
    },
    {
      "name": "filters, modulo, undefined argument",
      "template": "{{ 5 | modulo: nosuchthing }}",
      "invalid": true
    },
    {
      "name": "filters, newline to br, string with newlines",
      "template": "{{ \"- apples\n- oranges\n\" | newline_to_br }}",
      "result": "- apples<br />\n- oranges<br />\n"
    },
    {
      "name": "filters, newline to br, not a string",
      "template": "{{ 5 | newline_to_br }}",
      "result": "5"
    },
    {
      "name": "filters, newline to br, unexpected argument",
      "template": "{{ \"hello\" | newline_to_br: 5 }}",
      "invalid": true
    },
    {
      "name": "filters, newline to br, reference implementation test 1",
      "template": "{{ \"a\nb\nc\" | newline_to_br }}",
      "result": "a<br />\nb<br />\nc"
    },
    {
      "name": "filters, newline to br, reference implementation test 2",
      "template": "{{ \"a\r\nb\nc\" | newline_to_br }}",
      "result": "a<br />\nb<br />\nc"
    },
    {
      "name": "filters, newline to br, undefined left value",
      "template": "{{ nosuchthing | newline_to_br }}",
      "result": ""
    },
    {
      "name": "filters, plus, integer value and integer arg",
      "template": "{{ 10 | plus: 2 }}",
      "result": "12"
    },
    {
      "name": "filters, plus, integer value and float arg",
      "template": "{{ 10 | plus: 2.0 }}",
      "result": "12.0"
    },
    {
      "name": "filters, plus, float value and float arg",
      "template": "{{ 10.1 | plus: 2.2 }}",
      "result": "12.3"
    },
    {
      "name": "filters, plus, string value and string arg",
      "template": "{{ \"10.1\" | plus: \"2.2\" }}",
      "result": "12.3"
    },
    {
      "name": "filters, plus, string not a number",
      "template": "{{ \"foo\" | plus: \"2.0\" }}",
      "result": "2.0"
    },
    {
      "name": "filters, plus, arg string not a number",
      "template": "{{ \"10\" | plus: \"foo\" }}",
      "result": "10"
    },
    {
      "name": "filters, plus, too many args",
      "template": "{{ 5 | plus: 1, '5' }}",
      "invalid": true
    },
    {
      "name": "filters, plus, not a string, int or float",
      "template": "{{ a | plus: 1 }}",
      "data": {
        "a": {}
      },
      "result": "1"
    },
    {
      "name": "filters, plus, undefined left value",
      "template": "{{ nosuchthing | plus: 2 }}",
      "result": "2"
    },
    {
      "name": "filters, plus, undefined argument",
      "template": "{{ 10 | plus: nosuchthing }}",
      "result": "10"
    },
    {
      "name": "filters, plus, integer value and negative integer arg",
      "template": "{{ 10 | plus: -2 }}",
      "result": "8"
    },
    {
      "name": "filters, prepend, concat",
      "template": "{{ \"hello\" | prepend: \"there\" }}",
      "result": "therehello"
    },
    {
      "name": "filters, prepend, not a string",
      "template": "{{ 5 | prepend: 'there' }}",
      "result": "there5"
    },
    {
      "name": "filters, prepend, argument not a string",
      "template": "{{ \"hello\" | prepend: 5 }}",
      "result": "5hello"
    },
    {
      "name": "filters, prepend, missing argument",
      "template": "{{ \"hello\" | prepend }}",
      "invalid": true
    },
    {
      "name": "filters, prepend, too many arguments",
      "template": "{{ \"hello\" | prepend: \"how\", \"are\", \"you\" }}",
      "invalid": true
    },
    {
      "name": "filters, prepend, undefined left value",
      "template": "{{ nosuchthing | prepend: \"hi\" }}",
      "result": "hi"
    },
    {
      "name": "filters, prepend, undefined argument",
      "template": "{{ \"hi\" | prepend: nosuchthing }}",
      "result": "hi"
    },
    {
      "name": "filters, reject, array of strings, default value",
      "template": "{% assign b = a | reject: 'c' %}{% for obj in b %}{{ obj }}, {% endfor %}",
      "data": {
        "a": [
          "x",
          "y",
          "cat"
        ]
      },
      "result": "x, y, "
    },
    {
      "name": "filters, reject, array containing null, default value",
      "template": "{{ a | reject: 'c' }}",
      "data": {
        "a": [
          "x",
          "y",
          "cat",
          null
        ]
      },
      "result": ""
    },
    {
      "name": "filters, reject, array containing an int, default value",
      "template": "{{ a | reject: 'c' }}",
      "data": {
        "a": [
          "x",
          "y",
          "cat",
          1
        ]
      },
      "invalid": true
    },
    {
      "name": "filters, reject, array of hashes, default value",
      "template": "{% assign b = a | reject: 'title' %}{% for obj in b %}{% for itm in obj %}({{ itm[0] }},{{ itm[1] }}), {% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": false
          },
          {
            "title": null
          },
          {
            "heading": "baz"
          }
        ]
      },
      "result": "(title,false), (title,), (heading,baz), "
    },
    {
      "name": "filters, reject, array of hashes, explicit nil",
      "template": "{% assign b = a | reject: 'title', nil %}{% for obj in b %}{% for itm in obj %}({{ itm[0] }},{{ itm[1] }}), {% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": false
          },
          {
            "title": null
          },
          {
            "heading": "baz"
          }
        ]
      },
      "result": "(title,false), (title,), (heading,baz), "
    },
    {
      "name": "filters, reject, array of hashes, explicit false",
      "template": "{% assign b = a | reject: 'title', false %}{% for obj in b %}{% for itm in obj %}({{ itm[0] }},{{ itm[1] }}), {% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": false
          },
          {
            "title": "bar"
          },
          {
            "title": null
          },
          {
            "heading": "baz"
          }
        ]
      },
      "result": "(title,bar), (title,), (heading,baz), "
    },
    {
      "name": "filters, reject, array of hashes, explicit true",
      "template": "{% assign b = a | reject: 'title', true %}{% for obj in b %}{% for itm in obj %}({{ itm[0] }},{{ itm[1] }}), {% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": true
          },
          {
            "title": "bar"
          },
          {
            "title": null
          }
        ]
      },
      "result": "(title,bar), (title,), "
    },
    {
      "name": "filters, reject, array of hashes, string value",
      "template": "{% assign b = a | reject: 'title', 'bar' %}{% for obj in b %}{% for itm in obj %}({{ itm[0] }},{{ itm[1] }}), {% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          },
          {
            "title": null
          },
          {
            "heading": "baz"
          }
        ]
      },
      "result": "(title,foo), (title,), (heading,baz), "
    },
    {
      "name": "filters, reject, array of hashes, missing property",
      "template": "{% assign b = a | reject: 'title', 'bar' %}{% for obj in b %}{% for itm in obj %}({{ itm[0] }},{{ itm[1] }}), {% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "heading": "foo"
          },
          {
            "title": "bar"
          },
          {
            "title": null
          }
        ]
      },
      "result": "(heading,foo), (title,), "
    },
    {
      "name": "filters, reject, missing argument",
      "template": "{% assign b = a | reject %}{% for obj in b %}{{ obj }}, {% endfor %}",
      "data": {
        "a": [
          "x",
          "y",
          "cat"
        ]
      },
      "invalid": true
    },
    {
      "name": "filters, reject, too many arguments",
      "template": "{% assign b = a | reject: 'x', 'y', 'z' %}{% for obj in b %}{{ obj }}, {% endfor %}",
      "invalid": true
    },
    {
      "name": "filters, reject, input is undefined",
      "template": "{% assign b = nosuchthing | reject: 'c' %}{% for obj in b %}{{ obj }}, {% endfor %}",
      "result": ""
    },
    {
      "name": "filters, reject, first argument is undefined",
      "template": "{% assign b = a | reject: nosuchthing %}{% for obj in b %}{{ obj }}, {% endfor %}",
      "data": {
        "a": [
          "x",
          "y",
          "cat"
        ]
      },
      "result": ""
    },
    {
      "name": "filters, reject, second argument is undefined",
      "template": "{% assign b = a | reject: 'title', nosuchthing %}{% for obj in b %}{% for itm in obj %}({{ itm[0] }},{{ itm[1] }}), {% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          },
          {
            "title": null
          }
        ]
      },
      "result": "(title,), "
    },
    {
      "name": "filters, reject, input is a hash, default value",
      "template": "{% assign b = h | reject: 'bar' %}{% for obj in b %}{{ obj }}, {% endfor %}",
      "data": {
        "h": {
          "foo": 1,
          "bar": 2,
          "baz": 3
        }
      },
      "result": ""
    },
    {
      "name": "filters, reject, input is a hash, default value, no match",
      "template": "{% assign b = h | reject: 'barbar' %}{% for obj in b %}{% for itm in obj %}({{ itm[0] }},{{ itm[1] }}), {% endfor %}{% endfor %}",
      "data": {
        "h": {
          "foo": 1,
          "bar": 2,
          "baz": 3
        }
      },
      "result": "(foo,1), (bar,2), (baz,3), "
    },
    {
      "name": "filters, reject, input is a hash, default value, nil match",
      "template": "{% assign b = h | reject: 'bar' %}{% for obj in b %}{% for itm in obj %}({{ itm[0] }},{{ itm[1] }}), {% endfor %}{% endfor %}",
      "data": {
        "h": {
          "foo": 1,
          "bar": null,
          "baz": 3
        }
      },
      "result": "(foo,1), (bar,), (baz,3), "
    },
    {
      "name": "filters, reject, input is a hash, explicit nil match",
      "template": "{% assign b = h | reject: 'bar', nil %}{% for obj in b %}{% for itm in obj %}({{ itm[0] }},{{ itm[1] }}), {% endfor %}{% endfor %}",
      "data": {
        "h": {
          "foo": 1,
          "bar": null,
          "baz": 3
        }
      },
      "result": "(foo,1), (bar,), (baz,3), "
    },
    {
      "name": "filters, reject, input is a hash, int value, no match",
      "template": "{% assign b = h | reject: 'bar', 1 %}{% for obj in b %}{% for itm in obj %}({{ itm[0] }},{{ itm[1] }}), {% endfor %}{% endfor %}",
      "data": {
        "h": {
          "foo": 1,
          "bar": 2,
          "baz": 3
        }
      },
      "result": "(foo,1), (bar,2), (baz,3), "
    },
    {
      "name": "filters, reject, input is a hash, int value, match",
      "template": "{% assign b = h | reject: 'bar', 2 %}{% for obj in b %}{% for itm in obj %}({{ itm[0] }},{{ itm[1] }}), {% endfor %}{% endfor %}",
      "data": {
        "h": {
          "foo": 1,
          "bar": 2,
          "baz": 3
        }
      },
      "result": ""
    },
    {
      "name": "filters, reject, nested array of hashes gets flattened",
      "template": "{% assign b = a | reject: 'title', 'bar' %}{% for obj in b %}{% for itm in obj %}({{ itm[0] }},{{ itm[1] }}), {% endfor %}{% endfor %}",
      "data": {
        "a": [
          [
            {
              "title": "foo"
            },
            {
              "title": "bar"
            }
          ],
          [
            [
              {
                "title": null
              }
            ]
          ]
        ]
      },
      "result": "(title,foo), (title,), "
    },
    {
      "name": "filters, reject, string input becomes a single element array, substring match",
      "template": "{% assign b = s | reject: 'oo' %}{% for obj in b %}{{ obj }}, {% endfor %}",
      "data": {
        "s": "foobar"
      },
      "result": ""
    },
    {
      "name": "filters, reject, string input becomes a single element array, no match",
      "template": "{% assign b = s | reject: 'xx' %}{% for obj in b %}{{ obj }}, {% endfor %}",
      "data": {
        "s": "foobar"
      },
      "result": "foobar, "
    },
    {
      "name": "filters, remove, remove substrings",
      "template": "{{ \"I strained to see the train through the rain\" | remove: \"rain\" }}",
      "result": "I sted to see the t through the "
    },
    {
      "name": "filters, remove, not a string",
      "template": "{{ 5 | remove: 'there' }}",
      "result": "5"
    },
    {
      "name": "filters, remove, argument not a string",
      "template": "{{ \"hello\" | remove: 5 }}",
      "result": "hello"
    },
    {
      "name": "filters, remove, missing argument",
      "template": "{{ \"hello\" | remove }}",
      "invalid": true
    },
    {
      "name": "filters, remove, too many arguments",
      "template": "{{ \"hello\" | remove: \"how\", \"are\", \"you\" }}",
      "invalid": true
    },
    {
      "name": "filters, remove, undefined left value",
      "template": "{{ nosuchthing | remove: \"rain\" }}",
      "result": ""
    },
    {
      "name": "filters, remove, undefined argument",
      "template": "{{ \"hello\" | remove: nosuchthing }}",
      "result": "hello"
    },
    {
      "name": "filters, remove first, remove substrings",
      "template": "{{ \"I strained to see the train through the rain\" | remove_first: \"rain\" }}",
      "result": "I sted to see the train through the rain"
    },
    {
      "name": "filters, remove first, not a string",
      "template": "{{ 5 | remove_first: 'rain' }}",
      "result": "5"
    },
    {
      "name": "filters, remove first, argument not a string",
      "template": "{{ \"hello\" | remove_first: 5 }}",
      "result": "hello"
    },
    {
      "name": "filters, remove first, missing argument",
      "template": "{{ \"hello\" | remove_first }}",
      "invalid": true
    },
    {
      "name": "filters, remove first, too many arguments",
      "template": "{{ \"hello\" | remove_first: \"how\", \"are\", \"you\" }}",
      "invalid": true
    },
    {
      "name": "filters, remove first, undefined left value",
      "template": "{{ nosuchthing | remove_first: \"rain\" }}",
      "result": ""
    },
    {
      "name": "filters, remove first, undefined argument",
      "template": "{{ \"hello\" | remove_first: nosuchthing }}",
      "result": "hello"
    },
    {
      "name": "filters, remove last, remove substrings",
      "template": "{{ \"I strained to see the train through the rain\" | remove_last: \"rain\" }}",
      "result": "I strained to see the train through the "
    },
    {
      "name": "filters, remove last, not a string",
      "template": "{{ 5 | remove_last: 'rain' }}",
      "result": "5"
    },
    {
      "name": "filters, remove last, argument not a string",
      "template": "{{ \"hello\" | remove_last: 5 }}",
      "result": "hello"
    },
    {
      "name": "filters, remove last, missing argument",
      "template": "{{ \"hello\" | remove_last }}",
      "invalid": true
    },
    {
      "name": "filters, remove last, too many arguments",
      "template": "{{ \"hello\" | remove_last: \"how\", \"are\", \"you\" }}",
      "invalid": true
    },
    {
      "name": "filters, remove last, undefined left value",
      "template": "{{ nosuchthing | remove_last: \"rain\" }}",
      "result": ""
    },
    {
      "name": "filters, remove last, undefined argument",
      "template": "{{ \"hello\" | remove_last: nosuchthing }}",
      "result": "hello"
    },
    {
      "name": "filters, replace, replace substrings",
      "template": "{{ \"Take my protein pills and put my helmet on\" | replace: \"my\", \"your\" }}",
      "result": "Take your protein pills and put your helmet on"
    },
    {
      "name": "filters, replace, not a string",
      "template": "{{ 5 | replace: 'rain', 'foo' }}",
      "result": "5"
    },
    {
      "name": "filters, replace, left value is an object",
      "template": "{{ a | replace: '{', '!' }}",
      "data": {
        "a": {}
      },
      "result": "!}"
    },
    {
      "name": "filters, replace, argument not a string",
      "template": "{{ \"hello\" | replace: 5, \"your\" }}",
      "result": "hello"
    },
    {
      "name": "filters, replace, missing argument",
      "template": "{{ \"hello\" | replace: \"ll\" }}",
      "result": "heo"
    },
    {
      "name": "filters, replace, missing arguments",
      "template": "{{ \"hello\" | replace }}",
      "invalid": true
    },
    {
      "name": "filters, replace, too many arguments",
      "template": "{{ \"hello\" | replace: \"how\", \"are\", \"you\" }}",
      "invalid": true
    },
    {
      "name": "filters, replace, undefined left value",
      "template": "{{ nosuchthing | replace: \"my\", \"your\" }}",
      "result": ""
    },
    {
      "name": "filters, replace, undefined first argument",
      "template": "{{ \"Take my protein\" | replace: nosuchthing, \"#\" }}",
      "result": "#T#a#k#e# #m#y# #p#r#o#t#e#i#n#"
    },
    {
      "name": "filters, replace, undefined second argument",
      "template": "{{ \"Take my protein pills and put my helmet on\" | replace: \"my\", nosuchthing }}",
      "result": "Take  protein pills and put  helmet on"
    },
    {
      "name": "filters, replace first, replace substrings",
      "template": "{{ \"Take my protein pills and put my helmet on\" | replace_first: \"my\", \"your\" }}",
      "result": "Take your protein pills and put my helmet on"
    },
    {
      "name": "filters, replace first, not a string",
      "template": "{{ 5 | replace_first: 'rain', 'foo' }}",
      "result": "5"
    },
    {
      "name": "filters, replace first, argument not a string",
      "template": "{{ \"hello5\" | replace_first: 5, \"your\" }}",
      "result": "helloyour"
    },
    {
      "name": "filters, replace first, missing argument",
      "template": "{{ \"hello\" | replace_first: \"ll\" }}",
      "result": "heo"
    },
    {
      "name": "filters, replace first, missing arguments",
      "template": "{{ \"hello\" | replace_first }}",
      "invalid": true
    },
    {
      "name": "filters, replace first, too many arguments",
      "template": "{{ \"hello\" | replace_first: \"how\", \"are\", \"you\" }}",
      "invalid": true
    },
    {
      "name": "filters, replace first, undefined left value",
      "template": "{{ nosuchthing | replace_first: \"my\", \"your\" }}",
      "result": ""
    },
    {
      "name": "filters, replace first, undefined first argument",
      "template": "{{ \"Take my protein\" | replace_first: nosuchthing, \"#\" }}",
      "result": "#Take my protein"
    },
    {
      "name": "filters, replace first, undefined second argument",
      "template": "{{ \"Take my protein pills and put my helmet on\" | replace_first: \"my\", nosuchthing }}",
      "result": "Take  protein pills and put my helmet on"
    },
    {
      "name": "filters, replace last, replace substrings",
      "template": "{{ \"Take my protein pills and put my helmet on\" | replace_last: \"my\", \"your\" }}",
      "result": "Take my protein pills and put your helmet on"
    },
    {
      "name": "filters, replace last, not a string",
      "template": "{{ 5 | replace_last: 'rain', 'foo' }}",
      "result": "5"
    },
    {
      "name": "filters, replace last, argument not a string",
      "template": "{{ \"hello5\" | replace_last: 5, \"your\" }}",
      "result": "helloyour"
    },
    {
      "name": "filters, replace last, missing argument",
      "template": "{{ \"hello\" | replace_last: \"ll\" }}",
      "invalid": true
    },
    {
      "name": "filters, replace last, missing arguments",
      "template": "{{ \"hello\" | replace_last }}",
      "invalid": true
    },
    {
      "name": "filters, replace last, too many arguments",
      "template": "{{ \"hello\" | replace_last: \"how\", \"are\", \"you\" }}",
      "invalid": true
    },
    {
      "name": "filters, replace last, undefined left value",
      "template": "{{ nosuchthing | replace_last: \"my\", \"your\" }}",
      "result": ""
    },
    {
      "name": "filters, replace last, undefined first argument",
      "template": "{{ \"Take my protein\" | replace_last: nosuchthing, \"#\" }}",
      "result": "Take my protein#"
    },
    {
      "name": "filters, replace last, undefined second argument",
      "template": "{{ \"Take my protein pills and put my helmet on\" | replace_last: \"my\", nosuchthing }}",
      "result": "Take my protein pills and put  helmet on"
    },
    {
      "name": "filters, reverse, array of strings",
      "template": "{{ a | reverse | join: '#' }}",
      "data": {
        "a": [
          "b",
          "a",
          "B",
          "A"
        ]
      },
      "result": "A#B#a#b"
    },
    {
      "name": "filters, reverse, array of things",
      "template": "{{ a | reverse | join: '#' }}",
      "data": {
        "a": [
          "a",
          "b",
          1,
          [],
          {}
        ]
      },
      "result": "{}#1#b#a"
    },
    {
      "name": "filters, reverse, empty array",
      "template": "{{ a | reverse | join: '#' }}",
      "data": {
        "a": []
      },
      "result": ""
    },
    {
      "name": "filters, reverse, unexpected argument",
      "template": "{{ a | reverse: 0 | join: '#' }}",
      "data": {
        "a": []
      },
      "invalid": true
    },
    {
      "name": "filters, reverse, left value not an array",
      "template": "{{ a | reverse | join: '#' }}",
      "data": {
        "a": 123
      },
      "result": "123"
    },
    {
      "name": "filters, reverse, left value is undefined",
      "template": "{{ nosuchthing | reverse | join: '#' }}",
      "result": ""
    },
    {
      "name": "filters, round, float round down",
      "template": "{{ 5.1 | round }}",
      "result": "5"
    },
    {
      "name": "filters, round, float round up",
      "template": "{{ 5.6 | round }}",
      "result": "6"
    },
    {
      "name": "filters, round, float as a string",
      "template": "{{ \"5.6\" | round }}",
      "result": "6"
    },
    {
      "name": "filters, round, string argument",
      "template": "{{ 5.666 | round: \"1\" }}",
      "result": "5.7"
    },
    {
      "name": "filters, round, decimal places",
      "template": "{{ \"5.666666\" | round: 2 }}",
      "result": "5.67"
    },
    {
      "name": "filters, round, integer",
      "template": "{{ 5 | round }}",
      "result": "5"
    },
    {
      "name": "filters, round, too many args",
      "template": "{{ 5 | round: 1, 2 }}",
      "invalid": true
    },
    {
      "name": "filters, round, undefined left value",
      "template": "{{ nosuchthing | round: 2 }}",
      "result": "0"
    },
    {
      "name": "filters, round, undefined argument",
      "template": "{{ 5.666 | round: nosuchthing }}",
      "result": "6"
    },
    {
      "name": "filters, round, argument is a string",
      "template": "{{ 5.666 | round: 'foo' }}",
      "result": "6"
    },
    {
      "name": "filters, round, argument is a string representation of an integer",
      "template": "{{ 5.666 | round: '1' }}",
      "result": "5.7"
    },
    {
      "name": "filters, round, argument is a string representation of zero",
      "template": "{{ 5.666 | round: '1' }}",
      "result": "5.7"
    },
    {
      "name": "filters, round, argument is a negative",
      "template": "{{ 5.666 | round: -2 }}",
      "result": "0"
    },
    {
      "name": "filters, round, argument is a float",
      "template": "{{ 5.666 | round: 1.2 }}",
      "result": "5.7"
    },
    {
      "name": "filters, round, argument is a zero",
      "template": "{{ 5.666 | round: 0 }}",
      "result": "6"
    },
    {
      "name": "filters, rstrip, left padded",
      "template": "{{ \" \t\r\n  hello\" | rstrip }}",
      "result": " \t\r\n  hello"
    },
    {
      "name": "filters, rstrip, right padded",
      "template": "{{ \"hello \t\r\n  \" | rstrip }}",
      "result": "hello"
    },
    {
      "name": "filters, rstrip, left and right padded",
      "template": "{{ \" \t\r\n  hello  \t\r\n \" | rstrip }}",
      "result": " \t\r\n  hello"
    },
    {
      "name": "filters, rstrip, not a string",
      "template": "{{ 5 | rstrip }}",
      "result": "5"
    },
    {
      "name": "filters, rstrip, unexpected argument",
      "template": "{{ \"hello\" | rstrip: 5 }}",
      "invalid": true
    },
    {
      "name": "filters, rstrip, undefined left value",
      "template": "{{ nosuchthing | rstrip }}",
      "result": ""
    },
    {
      "name": "filters, size, size of an array",
      "template": "{{ a | size }}",
      "data": {
        "a": [
          "a",
          "b",
          "c"
        ]
      },
      "result": "3"
    },
    {
      "name": "filters, size, size of a string",
      "template": "{{ a | size }}",
      "data": {
        "a": "abc"
      },
      "result": "3"
    },
    {
      "name": "filters, size, size of an empty array",
      "template": "{{ a | size }}",
      "data": {
        "a": []
      },
      "result": "0"
    },
    {
      "name": "filters, size, size of a hash",
      "template": "{{ a | size }}",
      "data": {
        "a": {
          "a": 1,
          "b": 2
        }
      },
      "result": "2"
    },
    {
      "name": "filters, size, unexpected argument",
      "template": "{{ a | size: 'foo' }}",
      "data": {
        "a": [
          1,
          2,
          3
        ]
      },
      "invalid": true
    },
    {
      "name": "filters, size, undefined left value",
      "template": "{{ nosuchthing | size }}",
      "result": "0"
    },
    {
      "name": "filters, slice, zero",
      "template": "{{ \"hello\" | slice: 0 }}",
      "result": "h"
    },
    {
      "name": "filters, slice, one",
      "template": "{{ \"hello\" | slice: 1 }}",
      "result": "e"
    },
    {
      "name": "filters, slice, one length three",
      "template": "{{ \"hello\" | slice: 1, 3 }}",
      "result": "ell"
    },
    {
      "name": "filters, slice, out of range",
      "template": "{{ \"hello\" | slice: 99 }}",
      "result": ""
    },
    {
      "name": "filters, slice, not a string",
      "template": "{{ 5 | slice: 1 }}",
      "result": ""
    },
    {
      "name": "filters, slice, first argument is a string",
      "template": "{{ \"hello\" | slice: \"2\" }}",
      "result": "l"
    },
    {
      "name": "filters, slice, first argument not an integer",
      "template": "{{ \"hello\" | slice: \"foo\" }}",
      "invalid": true
    },
    {
      "name": "filters, slice, second argument not an integer",
      "template": "{{ \"hello\" | slice: 5, \"foo\" }}",
      "invalid": true
    },
    {
      "name": "filters, slice, second argument is a string",
      "template": "{{ \"hello\" | slice: 3, \"2\" }}",
      "result": "lo"
    },
    {
      "name": "filters, slice, missing arguments",
      "template": "{{ \"hello\" | slice }}",
      "invalid": true
    },
    {
      "name": "filters, slice, too many arguments",
      "template": "{{ \"hello\" | slice: 1, 2, 3 }}",
      "invalid": true
    },
    {
      "name": "filters, slice, undefined left value",
      "template": "{{ nosuchthing | slice: 1, 3 }}",
      "result": ""
    },
    {
      "name": "filters, slice, undefined first argument",
      "template": "{{ \"hello\" | slice: nosuchthing, 3 }}",
      "invalid": true
    },
    {
      "name": "filters, slice, undefined second argument",
      "template": "{{ \"hello\" | slice: 1, nosuchthing }}",
      "result": "e"
    },
    {
      "name": "filters, slice, slice an array of numbers",
      "template": "{{ a | slice: 2, 3 | join: '#' }}",
      "data": {
        "a": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "result": "3#4#5"
    },
    {
      "name": "filters, slice, first argument is a float",
      "template": "{{ 'Liquid' | slice: 2.2 }}",
      "invalid": true
    },
    {
      "name": "filters, slice, second argument is a float",
      "template": "{{ 'Liquid' | slice: 1, 2.2 }}",
      "invalid": true
    },
    {
      "name": "filters, slice, negative first argument",
      "template": "{{ 'Liquid' | slice: -2 }}",
      "result": "i"
    },
    {
      "name": "filters, slice, negative first argument and positive length",
      "template": "{{ 'Liquid' | slice: -2, 2 }}",
      "result": "id"
    },
    {
      "name": "filters, slice, negative first argument and negative length",
      "template": "{{ 'Liquid' | slice: -2, -1 }}",
      "result": ""
    },
    {
      "name": "filters, slice, negative first argument and length out of range",
      "template": "{{ 'Liquid' | slice: -2, 99 }}",
      "result": "id"
    },
    {
      "name": "filters, sort, array of strings",
      "template": "{{ a | sort | join: '#' }}",
      "data": {
        "a": [
          "b",
          "a",
          "C",
          "B",
          "A"
        ]
      },
      "result": "A#B#C#a#b"
    },
    {
      "name": "filters, sort, array of objects",
      "template": "{% assign x = a | sort: 'title' %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "Baz"
          },
          {
            "title": "bar"
          }
        ]
      },
      "result": "(title,Baz)(title,bar)(title,foo)"
    },
    {
      "name": "filters, sort, array of objects with missing key",
      "template": "{% assign x = a | sort: 'title' %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "heading": "Baz"
          },
          {
            "title": "bar"
          }
        ]
      },
      "result": "(title,bar)(title,foo)(heading,Baz)"
    },
    {
      "name": "filters, sort, empty array",
      "template": "{{ a | sort | join: '#' }}",
      "data": {
        "a": []
      },
      "result": ""
    },
    {
      "name": "filters, sort, too many arguments",
      "template": "{{ a | sort: 'title', 'foo' | join: '#' }}",
      "data": {
        "a": [
          "b",
          "a"
        ]
      },
      "invalid": true
    },
    {
      "name": "filters, sort, left value is not an array",
      "template": "{{ a | sort | join: '#' }}",
      "data": {
        "a": 123
      },
      "result": "123"
    },
    {
      "name": "filters, sort, left value is undefined",
      "template": "{{ nosuchthing | sort | join: '#' }}",
      "result": ""
    },
    {
      "name": "filters, sort, argument is undefined",
      "template": "{{ a | sort: nosuchthing | join: '#' }}",
      "data": {
        "a": [
          "b",
          "a"
        ]
      },
      "result": "a#b"
    },
    {
      "name": "filters, sort, sort a string",
      "template": "{{ 'BzAa4' | sort | join: '#' }}",
      "result": "BzAa4"
    },
    {
      "name": "filters, sort, array of integers",
      "template": "{{ a | sort | join: '#' }}",
      "data": {
        "a": [
          1,
          1000,
          3,
          30
        ]
      },
      "result": "1#3#30#1000"
    },
    {
      "name": "filters, sort, incompatible types",
      "template": "{{ a | sort }}",
      "data": {
        "a": [
          [],
          {},
          1,
          "4"
        ]
      },
      "invalid": true
    },
    {
      "name": "filters, sort natural, array of strings",
      "template": "{{ a | sort_natural | join: '#' }}",
      "data": {
        "a": [
          "b",
          "a",
          "C",
          "B",
          "A"
        ]
      },
      "result": "a#A#b#B#C"
    },
    {
      "name": "filters, sort natural, array of strings with a nul",
      "template": "{% assign x = a | sort_natural %}{% for i in x %}{{ i }}{% unless forloop.last %}#{% endunless %}{% endfor %}",
      "data": {
        "a": [
          "b",
          "a",
          null,
          "C",
          "B",
          "A"
        ]
      },
      "result": "a#A#b#B#C#"
    },
    {
      "name": "filters, sort natural, array of objects with a key",
      "template": "{% assign x = a | sort_natural: 'title' %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          },
          {
            "title": "Baz"
          }
        ]
      },
      "result": "(title,bar)(title,Baz)(title,foo)"
    },
    {
      "name": "filters, sort natural, array of objects with a key gets stringified",
      "template": "{% assign x = a | sort_natural: 'title' %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": 9
          },
          {
            "title": 1111
          },
          {
            "title": 87
          }
        ]
      },
      "result": "(title,1111)(title,87)(title,9)"
    },
    {
      "name": "filters, sort natural, array of objects with a missing key",
      "template": "{% assign x = a | sort_natural: 'title' %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          },
          {
            "heading": "Baz"
          }
        ]
      },
      "result": "(title,bar)(title,foo)(heading,Baz)"
    },
    {
      "name": "filters, sort natural, argument is undefined",
      "template": "{% assign x = a | sort_natural: nosuchthing %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          },
          {
            "title": "Baz"
          }
        ]
      },
      "result": "(title,bar)(title,Baz)(title,foo)"
    },
    {
      "name": "filters, sort natural, empty array",
      "template": "{% assign x = a | sort_natural %}{% for i in x %}{{ i }}{% unless forloop.last %}#{% endunless %}{% endfor %}",
      "data": {
        "a": []
      },
      "result": ""
    },
    {
      "name": "filters, sort natural, left value is not an array",
      "template": "{{ a | sort_natural }}",
      "data": {
        "a": 123
      },
      "result": "123"
    },
    {
      "name": "filters, sort natural, left value is undefined",
      "template": "{{ nosuchthing | sort_natural }}",
      "result": ""
    },
    {
      "name": "filters, sort natural, incompatible types",
      "template": "{{ a | sort_natural }}",
      "data": {
        "a": [
          {},
          1,
          "4"
        ]
      },
      "result": "14{}"
    },
    {
      "name": "filters, split, split string",
      "template": "{{ \"Hi, how are you today?\" | split: \" \" | join: \"#\" }}",
      "result": "Hi,#how#are#you#today?"
    },
    {
      "name": "filters, split, not a string",
      "template": "{{ 56 | split: ' ' | first }}",
      "result": "56"
    },
    {
      "name": "filters, split, argument not a string",
      "template": "{{ \"hello th1ere\" | split: 1 | join: \"#\" }}",
      "result": "hello th#ere"
    },
    {
      "name": "filters, split, missing argument",
      "template": "{{ \"hello there\" | split }}",
      "invalid": true
    },
    {
      "name": "filters, split, too many arguments",
      "template": "{{ \"hello there\" | split: \" \", \",\" }}",
      "invalid": true
    },
    {
      "name": "filters, split, undefined left value",
      "template": "{{ nosuchthing | split: \" \" }}",
      "result": ""
    },
    {
      "name": "filters, split, undefined argument",
      "template": "{{ \"Hello there\" | split: nosuchthing | join: \"#\" }}",
      "result": "H#e#l#l#o# #t#h#e#r#e"
    },
    {
      "name": "filters, split, empty string argument",
      "template": "{% assign a = \"abc\" | split: \"\" %}{% for i in a %}#{{ forloop.index0 }}{{ i }}{% endfor %}",
      "result": "#0a#1b#2c"
    },
    {
      "name": "filters, split, argument is a single space",
      "template": "{% assign a = \"a b\nc\" | split: \" \" %}{% for i in a %}#{{ forloop.index0 }}{{ i }}{% endfor %}",
      "result": "#0a#1b#2c"
    },
    {
      "name": "filters, split, argument is nil",
      "template": "{{ \"Hello there\" | split: nil | join: \"#\" }}",
      "result": "H#e#l#l#o# #t#h#e#r#e"
    },
    {
      "name": "filters, split, argument is false",
      "template": "{{ \"Hello there\" | split: false | join: \"#\" }}",
      "result": "Hello there"
    },
    {
      "name": "filters, split, argument is a newline",
      "template": "{% assign a = \"a b\nc\" | split: x %}{% for i in a %}#{{ forloop.index0 }}{{ i }}{% endfor %}",
      "data": {
        "x": "\n"
      },
      "result": "#0a b#1c"
    },
    {
      "name": "filters, split, argument does not appear in string",
      "template": "{% assign a = \"abc\" | split: \",\" %}{% for i in a %}#{{ forloop.index0 }}{{ i }}{% endfor %}",
      "result": "#0abc"
    },
    {
      "name": "filters, split, empty string and empty argument",
      "template": "{% assign a = \"\" | split: \"\" %}{% for i in a %}{{ forloop.index0 }}{{ i }}{% endfor %}",
      "result": ""
    },
    {
      "name": "filters, split, empty string and single char argument",
      "template": "{% assign a = \"\" | split: \",\" %}{% for i in a %}{{ forloop.index0 }}{{ i }}{% endfor %}",
      "result": ""
    },
    {
      "name": "filters, split, left matches argument",
      "template": "{% assign a = \",\" | split: \",\" %}{% for i in a %}{{ forloop.index0 }}{{ i }}{% endfor %}",
      "result": ""
    },
    {
      "name": "filters, split, left matches string repr of argument",
      "template": "{% assign a = \"1\" | split: 1 %}{% for i in a %}{{ forloop.index0 }}{{ i }}{% endfor %}",
      "result": ""
    },
    {
      "name": "filters, strip, left padded",
      "template": "{{ \" \t\r\n  hello\" | strip }}",
      "result": "hello"
    },
    {
      "name": "filters, strip, right padded",
      "template": "{{ \"hello \t\r\n  \" | strip }}",
      "result": "hello"
    },
    {
      "name": "filters, strip, left and right padded",
      "template": "{{ \" \t\r\n  hello  \t\r\n \" | strip }}",
      "result": "hello"
    },
    {
      "name": "filters, strip, not a string",
      "template": "{{ 5 | strip }}",
      "result": "5"
    },
    {
      "name": "filters, strip, unexpected argument",
      "template": "{{ \"hello\" | strip: 5 }}",
      "invalid": true
    },
    {
      "name": "filters, strip, undefined left value",
      "template": "{{ nosuchthing | strip }}",
      "result": ""
    },
    {
      "name": "filters, strip html, some HTML markup",
      "template": "{{ s | strip_html }}",
      "data": {
        "s": "Have <em>you</em> read <strong>Ulysses</strong> &amp; &#20;?"
      },
      "result": "Have you read Ulysses &amp; &#20;?"
    },
    {
      "name": "filters, strip html, some HTML markup with HTML comment",
      "template": "{{ s | strip_html }}",
      "data": {
        "s": "<!-- Have --><em>you</em> read <strong>Ulysses</strong> &amp; &#20;?"
      },
      "result": "you read Ulysses &amp; &#20;?"
    },
    {
      "name": "filters, strip html, not a string",
      "template": "{{ 5 | strip_html }}",
      "result": "5"
    },
    {
      "name": "filters, strip html, unexpected argument",
      "template": "{{ \"hello\" | strip_html: 5 }}",
      "invalid": true
    },
    {
      "name": "filters, strip html, undefined left value",
      "template": "{{ nosuchthing | strip_html }}",
      "result": ""
    },
    {
      "name": "filters, strip html, html block",
      "template": "{{ s | strip_html }}",
      "data": {
        "s": "<div>test</div>"
      },
      "result": "test"
    },
    {
      "name": "filters, strip html, html block with id",
      "template": "{{ s | strip_html }}",
      "data": {
        "s": "<div id='test'>test</div>"
      },
      "result": "test"
    },
    {
      "name": "filters, strip html, script block",
      "template": "{{ s | strip_html }}",
      "data": {
        "s": "<script type='text/javascript'>document.write('some stuff');</script>"
      },
      "result": ""
    },
    {
      "name": "filters, strip html, style block",
      "template": "{{ s | strip_html }}",
      "data": {
        "s": "<style type='text/css'>foo bar</style>"
      },
      "result": ""
    },
    {
      "name": "filters, strip html, html block with newline",
      "template": "{{ s | strip_html }}",
      "data": {
        "s": "<div\nclass='multiline'>test</div>"
      },
      "result": "test"
    },
    {
      "name": "filters, strip html, html comment with newline",
      "template": "{{ s | strip_html }}",
      "data": {
        "s": "<!-- foo bar \n test -->test"
      },
      "result": "test"
    },
    {
      "name": "filters, strip newlines, newline and other whitespace",
      "template": "{{ \"hello there\nyou\" | strip_newlines }}",
      "result": "hello thereyou"
    },
    {
      "name": "filters, strip newlines, not a string",
      "template": "{{ 5 | strip_newlines }}",
      "result": "5"
    },
    {
      "name": "filters, strip newlines, unexpected argument",
      "template": "{{ \"hello\" | strip_newlines: 5 }}",
      "invalid": true
    },
    {
      "name": "filters, strip newlines, reference implementation test 1",
      "template": "{{ \"a\nb\nc\" | strip_newlines }}",
      "result": "abc"
    },
    {
      "name": "filters, strip newlines, reference implementation test 2",
      "template": "{{ \"a\r\nb\nc\" | strip_newlines }}",
      "result": "abc"
    },
    {
      "name": "filters, strip newlines, undefined left value",
      "template": "{{ nosuchthing | strip_newlines }}",
      "result": ""
    },
    {
      "name": "filters, sum, empty sequence",
      "template": "{{ a | sum }}",
      "data": {
        "a": []
      },
      "result": "0"
    },
    {
      "name": "filters, sum, only zeros",
      "template": "{{ a | sum }}",
      "data": {
        "a": [
          0,
          0,
          0
        ]
      },
      "result": "0"
    },
    {
      "name": "filters, sum, ints",
      "template": "{{ a | sum }}",
      "data": {
        "a": [
          1,
          2,
          3
        ]
      },
      "result": "6"
    },
    {
      "name": "filters, sum, negative ints",
      "template": "{{ a | sum }}",
      "data": {
        "a": [
          -1,
          -2,
          -3
        ]
      },
      "result": "-6"
    },
    {
      "name": "filters, sum, negative strings",
      "template": "{{ a | sum }}",
      "data": {
        "a": [
          "-1",
          "-2",
          "-3"
        ]
      },
      "result": "-6"
    },
    {
      "name": "filters, sum, positive and negative ints",
      "template": "{{ a | sum }}",
      "data": {
        "a": [
          -2,
          -3,
          10
        ]
      },
      "result": "5"
    },
    {
      "name": "filters, sum, nested ints",
      "template": "{{ a | sum }}",
      "data": {
        "a": [
          1,
          [
            2,
            [
              3
            ]
          ]
        ]
      },
      "result": "6"
    },
    {
      "name": "filters, sum, hashes with property argument",
      "template": "{{ a | sum: 'k' }}",
      "data": {
        "a": [
          {
            "k": 1
          },
          {
            "k": 2
          },
          {
            "k": 3
          }
        ]
      },
      "result": "6"
    },
    {
      "name": "filters, sum, hashes with numeric strings and property argument",
      "template": "{{ a | sum: 'k' }}",
      "data": {
        "a": [
          {
            "k": "1"
          },
          {
            "k": "2"
          },
          {
            "k": "3"
          }
        ]
      },
      "result": "6"
    },
    {
      "name": "filters, sum, hashes without property argument",
      "template": "{{ a | sum }}",
      "data": {
        "a": [
          {
            "k": 1
          },
          {
            "k": 2
          },
          {
            "k": 3
          }
        ]
      },
      "result": "0"
    },
    {
      "name": "filters, sum, hashes with some missing properties",
      "template": "{{ a | sum: 'k' }}",
      "data": {
        "a": [
          {
            "k": 1
          },
          {
            "k": 2
          },
          {
            "x": 3
          }
        ]
      },
      "result": "3"
    },
    {
      "name": "filters, sum, properties arguments with non-hash items",
      "template": "{{ a | sum: 'k' }}",
      "data": {
        "a": [
          1,
          2,
          3
        ]
      },
      "invalid": true
    },
    {
      "name": "filters, times, int times int",
      "template": "{{ 5 | times: 2 }}",
      "result": "10"
    },
    {
      "name": "filters, times, int times float",
      "template": "{{ 5 | times: 2.1 }}",
      "result": "10.5"
    },
    {
      "name": "filters, times, float times float",
      "template": "{{ 5.0 | times: 2.1 }}",
      "result": "10.5"
    },
    {
      "name": "filters, times, string times string",
      "template": "{{ \"5.0\" | times: \"2.1\" }}",
      "result": "10.5"
    },
    {
      "name": "filters, times, negative multiplication",
      "template": "{{ -5 | times: 2 }}",
      "result": "-10"
    },
    {
      "name": "filters, times, missing arg",
      "template": "{{ 5 | times }}",
      "invalid": true
    },
    {
      "name": "filters, times, too many args",
      "template": "{{ 5 | times: 1, 2 }}",
      "invalid": true
    },
    {
      "name": "filters, times, undefined left value",
      "template": "{{ nosuchthing | times: 2 }}",
      "result": "0"
    },
    {
      "name": "filters, times, undefined argument",
      "template": "{{ 5 | times: nosuchthing }}",
      "result": "0"
    },
    {
      "name": "filters, truncate, default end",
      "template": "{{ \"Ground control to Major Tom.\" | truncate: 20 }}",
      "result": "Ground control to..."
    },
    {
      "name": "filters, truncate, custom end",
      "template": "{{ \"Ground control to Major Tom.\" | truncate: 25, \", and so on\" }}",
      "result": "Ground control, and so on"
    },
    {
      "name": "filters, truncate, no end",
      "template": "{{ \"Ground control to Major Tom.\" | truncate: 20, \"\" }}",
      "result": "Ground control to Ma"
    },
    {
      "name": "filters, truncate, string is shorter than length",
      "template": "{{ \"Ground control\" | truncate: 20 }}",
      "result": "Ground control"
    },
    {
      "name": "filters, truncate, not a string",
      "template": "{{ 5 | truncate: 10 }}",
      "result": "5"
    },
    {
      "name": "filters, truncate, too many arguments",
      "template": "{{ \"hello\" | truncate: 5, \"foo\", \"bar\" }}",
      "invalid": true
    },
    {
      "name": "filters, truncate, undefined left value",
      "template": "{{ nosuchthing | truncate: 5 }}",
      "result": ""
    },
    {
      "name": "filters, truncate, undefined first argument",
      "template": "{{ \"Ground control to Major Tom.\" | truncate: nosuchthing }}",
      "invalid": true
    },
    {
      "name": "filters, truncate, undefined second argument",
      "template": "{{ \"Ground control to Major Tom.\" | truncate: 20, nosuchthing }}",
      "result": "Ground control to Ma"
    },
    {
      "name": "filters, truncate, default length is 50",
      "template": "{{ \"Ground control to Major Tom. Ground control to Major Tom.\" | truncate }}",
      "result": "Ground control to Major Tom. Ground control to ..."
    },
    {
      "name": "filters, truncatewords, default end",
      "template": "{{ \"Ground control to Major Tom.\" | truncatewords: 3 }}",
      "result": "Ground control to..."
    },
    {
      "name": "filters, truncatewords, custom end",
      "template": "{{ \"Ground control to Major Tom.\" | truncatewords: 3, \"--\" }}",
      "result": "Ground control to--"
    },
    {
      "name": "filters, truncatewords, no end",
      "template": "{{ \"Ground control to Major Tom.\" | truncatewords: 3, \"\" }}",
      "result": "Ground control to"
    },
    {
      "name": "filters, truncatewords, fewer words than word count",
      "template": "{{ \"Ground control\" | truncatewords: 3 }}",
      "result": "Ground control"
    },
    {
      "name": "filters, truncatewords, not a string",
      "template": "{{ 5 | truncatewords: 10 }}",
      "result": "5"
    },
    {
      "name": "filters, truncatewords, too many arguments",
      "template": "{{ \"hello\" | truncatewords: 5, \"foo\", \"bar\" }}",
      "invalid": true
    },
    {
      "name": "filters, truncatewords, reference implementation test 1",
      "template": "{{ \"测试测试测试测试\" | truncatewords: 5 }}",
      "result": "测试测试测试测试"
    },
    {
      "name": "filters, truncatewords, reference implementation test 2",
      "template": "{{ \"one two three\" | truncatewords: 2, 1 }}",
      "result": "one two1"
    },
    {
      "name": "filters, truncatewords, reference implementation test 3",
      "template": "{{ \"one  two\tthree\nfour\" | truncatewords: 3 }}",
      "result": "one two three..."
    },
    {
      "name": "filters, truncatewords, reference implementation test 4",
      "template": "{{ \"one two three four\" | truncatewords: 2 }}",
      "result": "one two..."
    },
    {
      "name": "filters, truncatewords, reference implementation test 5",
      "template": "{{ \"one two three four\" | truncatewords: 0 }}",
      "result": "one..."
    },
    {
      "name": "filters, truncatewords, undefined left value",
      "template": "{{ nosuchthing | truncatewords: 5 }}",
      "result": ""
    },
    {
      "name": "filters, truncatewords, undefined first argument",
      "template": "{{ \"one two three four\" | truncatewords: nosuchthing }}",
      "invalid": true
    },
    {
      "name": "filters, truncatewords, undefined second argument",
      "template": "{{ \"one two three four\" | truncatewords: 2, nosuchthing }}",
      "result": "one two"
    },
    {
      "name": "filters, truncatewords, number of words defaults to 15",
      "template": "{{ \"a b c d e f g h i j k l m n o p q\" | truncatewords }}",
      "result": "a b c d e f g h i j k l m n o..."
    },
    {
      "name": "filters, truncatewords, all whitespace is clobbered",
      "template": "{{ \"    one    two three    four  \" | truncatewords: 2 }}",
      "result": "one two..."
    },
    {
      "name": "filters, uniq, array of strings",
      "template": "{{ a | uniq | join: '#' }}",
      "data": {
        "a": [
          "a",
          "b",
          "b",
          "a"
        ]
      },
      "result": "a#b"
    },
    {
      "name": "filters, uniq, array of things",
      "template": "{{ a | uniq | join: '#' }}",
      "data": {
        "a": [
          "a",
          "b",
          1,
          1
        ]
      },
      "result": "a#b#1"
    },
    {
      "name": "filters, uniq, empty array",
      "template": "{{ a | uniq | join: '#' }}",
      "data": {
        "a": []
      },
      "result": ""
    },
    {
      "name": "filters, uniq, unhashable items",
      "template": "{{ a | uniq | join: '#' }}",
      "data": {
        "a": [
          "a",
          "b",
          [],
          {},
          {}
        ]
      },
      "result": "a#b#{}"
    },
    {
      "name": "filters, uniq, left value is not an array",
      "template": "{{ a | uniq | join: '#' }}",
      "data": {
        "a": 123
      },
      "result": "123"
    },
    {
      "name": "filters, uniq, left value is undefined",
      "template": "{{ nosuchthing | uniq | join: '#' }}",
      "result": ""
    },
    {
      "name": "filters, uniq, too many arguments",
      "template": "{{ nosuchthing | uniq: 'foo', 'bar' }}",
      "invalid": true
    },
    {
      "name": "filters, uniq, array of objects with key property",
      "template": "{% assign x = a | uniq: 'title' %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": "foo",
            "name": "a"
          },
          {
            "title": "foo",
            "name": "b"
          },
          {
            "title": "bar",
            "name": "c"
          }
        ]
      },
      "result": "(title,foo)(name,a)(title,bar)(name,c)"
    },
    {
      "name": "filters, uniq, array of objects with missing key property",
      "template": "{% assign x = a | uniq: 'title' %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": "foo",
            "name": "a"
          },
          {
            "title": "foo",
            "name": "b"
          },
          {
            "title": "bar",
            "name": "c"
          },
          {
            "heading": "bar",
            "name": "c"
          },
          {
            "heading": "baz",
            "name": "d"
          }
        ]
      },
      "result": "(title,foo)(name,a)(title,bar)(name,c)(heading,bar)(name,c)"
    },
    {
      "name": "filters, upcase, make lower case",
      "template": "{{ \"hello\" | upcase }}",
      "result": "HELLO"
    },
    {
      "name": "filters, upcase, not a string",
      "template": "{{ 5 | upcase }}",
      "result": "5"
    },
    {
      "name": "filters, upcase, unexpected argument",
      "template": "{{ \"hello\" | upcase: 5 }}",
      "invalid": true
    },
    {
      "name": "filters, upcase, undefined left value",
      "template": "{{ nosuchthing | upcase }}",
      "result": ""
    },
    {
      "name": "filters, url decode, some special URL characters",
      "template": "{{ \"email+address+is+bob%40example.com%21\" | url_decode }}",
      "result": "email address is bob@example.com!"
    },
    {
      "name": "filters, url decode, not a string",
      "template": "{{ 5 | url_decode }}",
      "result": "5"
    },
    {
      "name": "filters, url decode, unexpected argument",
      "template": "{{ \"hello\" | url_decode: 5 }}",
      "invalid": true
    },
    {
      "name": "filters, url decode, undefined left value",
      "template": "{{ nosuchthing | url_decode }}",
      "result": ""
    },
    {
      "name": "filters, url encode, some special URL characters",
      "template": "{{ \"email address is bob@example.com!\" | url_encode }}",
      "result": "email+address+is+bob%40example.com%21"
    },
    {
      "name": "filters, url encode, not a string",
      "template": "{{ 5 | url_encode }}",
      "result": "5"
    },
    {
      "name": "filters, url encode, unexpected argument",
      "template": "{{ \"hello\" | url_encode: 5 }}",
      "invalid": true
    },
    {
      "name": "filters, url encode, undefined left value",
      "template": "{{ nosuchthing | url_encode }}",
      "result": ""
    },
    {
      "name": "filters, where, array of hashes",
      "template": "{% assign x = a | where: 'title' %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          },
          {
            "title": null
          }
        ]
      },
      "result": "(title,foo)(title,bar)"
    },
    {
      "name": "filters, where, array of hashes with equality test",
      "template": "{% assign x = a | where: 'title', 'bar' %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          },
          {
            "title": null
          }
        ]
      },
      "result": "(title,bar)"
    },
    {
      "name": "filters, where, array of hashes with a missing key",
      "template": "{% assign x = a | where: 'title', 'bar' %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "heading": "foo"
          },
          {
            "title": "bar"
          },
          {
            "title": null
          }
        ]
      },
      "result": "(title,bar)"
    },
    {
      "name": "filters, where, left value is not an array",
      "template": "{{ a | where: 'title' }}",
      "data": {
        "a": 123
      },
      "invalid": true
    },
    {
      "name": "filters, where, missing argument",
      "template": "{{ a | where }}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          },
          {
            "title": null
          }
        ]
      },
      "invalid": true
    },
    {
      "name": "filters, where, too many arguments",
      "template": "{{ a | where: 'title', 'foo', 'bar' }}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          },
          {
            "title": null
          }
        ]
      },
      "invalid": true
    },
    {
      "name": "filters, where, left value is undefined",
      "template": "{{ nosuchthing | where: 'title' }}",
      "result": ""
    },
    {
      "name": "filters, where, first argument is undefined",
      "template": "{{ a | where: nosuchthing }}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          },
          {
            "title": null
          }
        ]
      },
      "result": ""
    },
    {
      "name": "filters, where, second argument is undefined",
      "template": "{% assign x = a | where: 'title', nosuchthing %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          },
          {
            "title": null
          }
        ]
      },
      "result": "(title,foo)(title,bar)"
    },
    {
      "name": "filters, where, both arguments are undefined",
      "template": "{{ a | where: nosuchthing, nothing }}",
      "data": {
        "a": [
          {
            "title": "foo"
          },
          {
            "title": "bar"
          },
          {
            "title": null
          }
        ]
      },
      "result": ""
    },
    {
      "name": "filters, where, value is false",
      "template": "{% assign x =  a | where: 'b', false %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "b": false
          },
          {
            "b": "bar"
          },
          {
            "b": null
          }
        ]
      },
      "result": "(b,false)"
    },
    {
      "name": "filters, where, value is explicit nil",
      "template": "{% assign x =  a | where: 'b', nil %}{% for obj in x %}{% for i in obj %}({{ i[0] }},{{ i[1] }}){% endfor %}{% endfor %}",
      "data": {
        "a": [
          {
            "b": false
          },
          {
            "b": "bar"
          },
          {
            "b": null
          }
        ]
      },
      "result": "(b,bar)"
    },
    {
      "name": "tags, assign, assign a filtered literal",
      "template": "{% assign foo = 'foo' | upcase %}{{ foo }}",
      "result": "FOO"
    },
    {
      "name": "tags, assign, local variables shadow global variables",
      "template": "{{ foo }}{% assign foo = 'foo' | upcase %}{{ foo }}",
      "data": {
        "foo": "bar"
      },
      "result": "barFOO"
    },
    {
      "name": "tags, assign, assign a range literal",
      "template": "{% assign foo = (1..3) %}{{ foo | join: '#' }}",
      "result": "1#2#3"
    },
    {
      "name": "tags, assign, assign to variable with a hyphen",
      "template": "{% assign some-thing = 'foo' %}{{ some-thing }}",
      "result": "foo"
    },
    {
      "name": "tags, assign, assign an existing array",
      "template": "{% assign foo = bar %}{{ foo[0] }}/{{ foo[1] }}",
      "data": {
        "bar": [
          "a",
          "b",
          "c"
        ]
      },
      "result": "a/b"
    },
    {
      "name": "tags, assign, assign an item from an existing object with quoted notation",
      "template": "{% assign foo = bar['baz'] %}{{ foo }}",
      "data": {
        "bar": {
          "baz": "hello"
        }
      },
      "result": "hello"
    },
    {
      "name": "tags, assign, assign with quoted notation and extra whitespace",
      "template": "{% assign foo = bar[ 'baz'  ] %}{{ foo }}",
      "data": {
        "bar": {
          "baz": "hello"
        }
      },
      "result": "hello"
    },
    {
      "name": "tags, capture, capture template literal and global variable",
      "template": "{% capture greeting %}Hello, {{ customer.first_name }}.{% endcapture %}{{ greeting }}",
      "data": {
        "customer": {
          "first_name": "Holly"
        }
      },
      "result": "Hello, Holly."
    },
    {
      "name": "tags, capture, capture into a variable with a hyphen",
      "template": "{% capture this-thing %}Hello, {{ customer.first_name }}.{% endcapture %}{{ this-thing }}",
      "data": {
        "customer": {
          "first_name": "Holly"
        }
      },
      "result": "Hello, Holly."
    },
    {
      "name": "tags, capture, assign to a variable from a captured variable",
      "template": "{% capture some %}hello{% endcapture %}{% assign other = some %}{{ some }}-{{ other }}",
      "result": "hello-hello"
    },
    {
      "name": "tags, case, simple case/when",
      "template": "{% case title %}{% when 'foo' %}foo{% when 'Hello' %}bar{% endcase %}",
      "data": {
        "title": "Hello"
      },
      "result": "bar"
    },
    {
      "name": "tags, case, 'when' expression using an identifier",
      "template": "{% case title %}{% when other %}foo{% when 'goodbye' %}bar{% endcase %}",
      "data": {
        "title": "Hello",
        "other": "Hello"
      },
      "result": "foo"
    },
    {
      "name": "tags, case, tags inside when block",
      "template": "{% case title %}{% when other %}{% if true %}foo{% endif %}{% when 'goodbye' %}bar{% endcase %}",
      "data": {
        "title": "Hello",
        "other": "Hello"
      },
      "result": "foo"
    },
    {
      "name": "tags, case, 'when' expression using an out of scope identifier",
      "template": "{% case title %}{% when nosuchthing %}foo{% when 'Hello' %}bar{% endcase %}",
      "data": {
        "title": "Hello"
      },
      "result": "bar"
    },
    {
      "name": "tags, case, name not in scope",
      "template": "{% case nosuchthing %}{% when 'foo' %}foo{% when 'bar' %}bar{% endcase %}",
      "result": ""
    },
    {
      "name": "tags, case, no match and no default",
      "template": "{% case title %}{% when 'foo' %}foo{% when 'bar' %}bar{% endcase %}",
      "data": {
        "title": "Hello"
      },
      "result": ""
    },
    {
      "name": "tags, case, with default",
      "template": "{% case title %}{% when 'foo' %}foo{% else %}bar{% endcase %}",
      "data": {
        "title": "Hello"
      },
      "result": "bar"
    },
    {
      "name": "tags, case, no whens",
      "template": "{% case title %}{% else %}bar{% endcase %}",
      "data": {
        "title": "Hello"
      },
      "result": "bar"
    },
    {
      "name": "tags, case, no whens or default",
      "template": "{% case title %}{% endcase %}",
      "data": {
        "title": "Hello"
      },
      "result": ""
    },
    {
      "name": "tags, case, whitespace",
      "template": "{% case title %}  \n\t{% when 'foo' %}foo\n{% when 'Hello' %}bar{% endcase %}",
      "data": {
        "title": "Hello"
      },
      "result": "bar"
    },
    {
      "name": "tags, case, comma separated when expression",
      "template": "{% case title %}{% when 'foo' %}foo{% when 'bar', 'Hello' %}bar{% endcase %}",
      "data": {
        "title": "Hello"
      },
      "result": "bar"
    },
    {
      "name": "tags, case, evaluate multiple matching blocks",
      "template": "{% case title %}{% when 'Hello' %}foo{% when a, 'Hello' %}bar{% endcase %}",
      "data": {
        "title": "Hello",
        "a": "Hello"
      },
      "result": "foobarbar"
    },
    {
      "name": "tags, case, or separated when expression",
      "template": "{% case title %}{% when 'foo' %}foo{% when 'bar' or 'Hello' %}bar{% endcase %}",
      "data": {
        "title": "Hello"
      },
      "result": "bar"
    },
    {
      "name": "tags, case, mix or and comma separated when expression",
      "template": "{% case title %}{% when 'foo' %}foo{% when 'bar' or 'Hello', 'Hello' %}bar{% endcase %}",
      "data": {
        "title": "Hello"
      },
      "result": "barbar"
    },
    {
      "name": "tags, case, unexpected when token",
      "template": "{% case title %}{% when 'foo' %}foo{% when 'bar' and 'Hello', 'Hello' %}bar{% endcase %}",
      "data": {
        "title": "Hello"
      },
      "result": ""
    },
    {
      "name": "tags, case, comma string literal",
      "template": "{% case foo %}{% when 'foo' %}bar{% when ',' %}comma{% endcase %}",
      "data": {
        "foo": ","
      },
      "result": "comma"
    },
    {
      "name": "tags, case, empty when tag",
      "template": "{% case foo %}{% when %}bar{% endcase %}",
      "data": {
        "foo": "bar"
      },
      "invalid": true
    },
    {
      "name": "tags, case, switch on array",
      "template": "{% case x %}{% when y %}foo{% endcase %}",
      "data": {
        "x": [
          "a",
          "b",
          "c"
        ],
        "y": [
          "a",
          "b",
          "c"
        ]
      },
      "result": "foo"
    },
    {
      "name": "tags, case, multiple else blocks",
      "template": "{% case 'x' %}{% when 'y' %}foo{% else %}bar{% else %}baz{% endcase %}",
      "result": "barbaz"
    },
    {
      "name": "tags, case, falsy when before and truthy when after else",
      "template": "{% case 'x' %}{% when 'y' %}foo{% else %}bar{% when 'x' %}baz{% endcase %}",
      "result": "barbaz"
    },
    {
      "name": "tags, case, falsy when before and truthy when after multiple else blocks",
      "template": "{% case 'x' %}{% when 'y' %}foo{% else %}bar{% else %}baz{% when 'x' %}qux{% endcase %}",
      "result": "barbazqux"
    },
    {
      "name": "tags, case, truthy when before and after else",
      "template": "{% case 'x' %}{% when 'x' %}foo{% else %}bar{% when 'x' %}baz{% endcase %}",
      "result": "foobaz"
    },
    {
      "name": "tags, case, truthy and empty when block before else",
      "template": "{% case 'x' %}{% when 'x' %}{% else %}bar{% endcase %}",
      "result": ""
    },
    {
      "name": "tags, comment, don't render comments",
      "template": "{% comment %}foo{% endcomment %}",
      "result": ""
    },
    {
      "name": "tags, comment, respect whitespace control in comments",
      "template": "\n{%- comment %}foo{% endcomment -%}\t \r",
      "result": ""
    },
    {
      "name": "tags, comment, don't render comments with tags",
      "template": "{% comment %}{% if true %}{{ title }}{% endif %}{% endcomment %}",
      "result": ""
    },
    {
      "name": "tags, comment, comment inside liquid tag",
      "template": "{% liquid\n    if 1 != 1\n    comment\n    else\n    echo 123\n    endcomment\n    endif\n%}",
      "result": ""
    },
    {
      "name": "tags, comment, commented tags are not parsed",
      "template": "{% comment %}    {% if true %}    {% if ... %}    {%- for ? -%}    {% while true %}    {%    unless if    %}    {% endcase %}{% endcomment %}",
      "result": ""
    },
    {
      "name": "tags, comment, malformed tags are not parsed",
      "template": "{% comment %}{% assign foo = '1'{% endcomment %}",
      "invalid": true
    },
    {
      "name": "tags, comment, incomplete tags are not parsed",
      "template": "{% comment %}{% {{ {%- endcomment %}",
      "invalid": true
    },
    {
      "name": "tags, comment, nested comment blocks",
      "template": "{% comment %}    {% comment %}    {% comment %}{%    endcomment     %}    {% endcomment %}{% endcomment %}",
      "result": ""
    },
    {
      "name": "tags, comment, nested comment blocks, with nested tags",
      "template": "{% comment %}    {% comment %}    {% comment %}{% if true %}hello{%endif%}{%    endcomment     %}    {% endcomment %}{% endcomment %}",
      "result": ""
    },
    {
      "name": "tags, comment, unclosed nested comment blocks",
      "template": "{% comment %}    {% comment %}    {% comment %}    {% endcomment %}{% endcomment %}",
      "invalid": true
    },
    {
      "name": "tags, comment, raw inside comment block",
      "template": "{% comment %}    {% raw %}    {% endcomment %}    {% endraw %}{% endcomment %}",
      "result": ""
    },
    {
      "name": "tags, cycle, no identifier",
      "template": "{% cycle 'some', 'other' %}{% cycle 'some', 'other' %}{% cycle 'some', 'other' %}",
      "result": "someothersome"
    },
    {
      "name": "tags, cycle, with identifier",
      "template": "{% cycle 'foo': 'some', 'other' %}{% cycle 'some', 'other' %}{% cycle 'foo': 'some', 'other' %}",
      "result": "somesomeother"
    },
    {
      "name": "tags, cycle, different items",
      "template": "{% cycle '1', '2', '3' %}{% cycle '1', '2' %}{% cycle '1', '2', '3' %}",
      "result": "112"
    },
    {
      "name": "tags, cycle, integers",
      "template": "{% cycle 1, 2, 3 %}{% cycle 1, 2, 3 %}{% cycle 1, 2, 3 %}",
      "result": "123"
    },
    {
      "name": "tags, cycle, variable name",
      "template": "{% cycle a: 1, 2, 3 %}{% cycle a: 1, 2, 3 %}{% cycle a: 1, 2, 3 %}",
      "data": {
        "a": "foo"
      },
      "result": "123"
    },
    {
      "name": "tags, cycle, multiple undefined variable names",
      "template": "{% cycle a: 1, 2, 3 %}{% cycle b: 1, 2, 3 %}{% cycle a: 1, 2, 3 %}",
      "result": "123"
    },
    {
      "name": "tags, cycle, undefined variable names mixed with no name",
      "template": "{% cycle a: 1, 2, 3 %}{% cycle b: 1, 2, 3 %}{% cycle 1, 2, 3 %}",
      "result": "121"
    },
    {
      "name": "tags, cycle, changing variable name",
      "template": "{% cycle a: 1, 2, 3 %}{% assign a = 'bar' %}{% cycle a: 1, 2, 3 %}{% cycle a: 1, 2, 3 %}",
      "data": {
        "a": "foo"
      },
      "result": "112"
    },
    {
      "name": "tags, cycle, named with different items",
      "template": "{% cycle 'a': 1, 2, 3 %}{% cycle 'a': 7, 8, 9 %}{% cycle 'a': 1, 2, 3 %}",
      "result": "183"
    },
    {
      "name": "tags, cycle, named with different number of arguments",
      "template": "{% cycle a: '1', '2' %}{% cycle a: '1', '2', '3' %}{% cycle a: '1' %}",
      "result": "12"
    },
    {
      "name": "tags, cycle, named with shrinking number of arguments",
      "template": "{% cycle a: '1', '2', '3' %}{% cycle a: '1', '2' %}{% cycle a: '1' %}",
      "result": "121"
    },
    {
      "name": "tags, cycle, named with growing number of arguments",
      "template": "{% cycle a: '1' %}{% cycle a: '1', '2' %}{% cycle a: '1', '2', '3' %}",
      "result": "112"
    },
    {
      "name": "tags, decrement, named counter",
      "template": "{% decrement foo %}{{ foo }} {% decrement foo %}{{ foo }}",
      "result": "-1-1 -2-2"
    },
    {
      "name": "tags, decrement, increment and decrement named counter",
      "template": "{% decrement foo %} {% decrement foo %} {% increment foo %}",
      "result": "-1 -2 -2"
    },
    {
      "name": "tags, doc, don't render docs",
      "template": "{% doc %}don't render me{% enddoc %}",
      "result": ""
    },
    {
      "name": "tags, doc, doc arguments is an error",
      "template": "{% doc hello %}don't render me{% enddoc %}",
      "invalid": true
    },
    {
      "name": "tags, doc, doc tag block must be closed",
      "template": "{% doc %}don't render me",
      "invalid": true
    },
    {
      "name": "tags, doc, doc text is not parsed",
      "template": "{% doc %}    {% if true %}    {% if ... %}    {%- for ? -%}    {% while true %}    {%    unless if    %}    {% endcase %}    {% raw %}{% enddoc %}",
      "result": ""
    },
    {
      "name": "tags, doc, nested docs are not allowed",
      "template": "{% doc hello %}Hello{% doc %}{% enddoc %}",
      "invalid": true
    },
    {
      "name": "tags, doc, docs containing unclosed tags are ok",
      "template": "{% doc %}{% assign x = y {% enddoc %}",
      "result": ""
    },
    {
      "name": "tags, doc, docs containing unclosed output are ok",
      "template": "{% doc %}{{ foo {% enddoc %}",
      "result": ""
    },
    {
      "name": "tags, doc, whitespace control",
      "template": "foo\n {%- doc %}I'm a doc comment{% enddoc -%}  \tbar",
      "result": "foobar"
    },
    {
      "name": "tags, echo, render a string literal",
      "template": "{% echo 'hello' %}",
      "result": "hello"
    },
    {
      "name": "tags, echo, render an integer literal",
      "template": "{% echo 123 %}",
      "result": "123"
    },
    {
      "name": "tags, echo, render a float literal",
      "template": "{% echo 1.23 %}",
      "result": "1.23"
    },
    {
      "name": "tags, echo, render a variable from the global namespace",
      "template": "{% echo product.title %}",
      "data": {
        "product": {
          "title": "foo"
        }
      },
      "result": "foo"
    },
    {
      "name": "tags, echo, render a variable from the local namespace",
      "template": "{% assign name = 'Brian' %}{% echo name %}",
      "result": "Brian"
    },
    {
      "name": "tags, echo, render an undefined variable",
      "template": "{% echo age %}",
      "result": ""
    },
    {
      "name": "tags, echo, render an undefined property",
      "template": "{% echo product.age %}",
      "data": {
        "product": {
          "title": "foo"
        }
      },
      "result": ""
    },
    {
      "name": "tags, echo, access an array item by index",
      "template": "{% echo product.tags[1] %}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "result": "garden"
    },
    {
      "name": "tags, echo, access an array item by negative index",
      "template": "{% echo product.tags[-2] %}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "result": "sports"
    },
    {
      "name": "tags, echo, access array item by index stored in a local variable",
      "template": "{% assign i = 1 %}{% echo product.tags[i] %}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "result": "garden"
    },
    {
      "name": "tags, echo, render a global identifier with a filter",
      "template": "{% echo product.title | upcase %}",
      "data": {
        "product": {
          "title": "foo"
        }
      },
      "result": "FOO"
    },
    {
      "name": "tags, echo, dump an array from the global context",
      "template": "{% echo product.tags %}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "result": "sportsgarden"
    },
    {
      "name": "tags, echo, assign a variable the value of an existing variable",
      "template": "{% capture some %}hello{% endcapture %}{% assign other = some %}{% assign some = 'foo' %}{% echo some %}-{% echo other %}",
      "result": "foo-hello"
    },
    {
      "name": "tags, echo, traverse variables with bracketed identifiers",
      "template": "{% echo site.data.menu[include.menu][include.locale] %}",
      "data": {
        "site": {
          "data": {
            "menu": {
              "foo": {
                "bar": "it works!"
              }
            }
          }
        },
        "include": {
          "menu": "foo",
          "locale": "bar"
        }
      },
      "result": "it works!"
    },
    {
      "name": "tags, echo, access an undefined variable by index",
      "template": "{% echo nosuchthing[0] %}",
      "result": ""
    },
    {
      "name": "tags, echo, nothing to echo",
      "template": "{% echo %}",
      "result": ""
    },
    {
      "name": "tags, for, simple range loop",
      "template": "{% for i in (0..3) %}{{ i }} {% endfor %}",
      "result": "0 1 2 3 "
    },
    {
      "name": "tags, for, range loop using identifier",
      "template": "{% for i in (0..product.end_range) %}{{ i }} - {{ product.tags[i] }} {% endfor %}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ],
          "end_range": 1
        }
      },
      "result": "0 - sports 1 - garden "
    },
    {
      "name": "tags, for, simple array loop",
      "template": "{% for tag in product.tags %}{{ tag }} {% endfor %}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "result": "sports garden "
    },
    {
      "name": "tags, for, loop over an array in reverse",
      "template": "{% for tag in product.tags reversed %}{{ tag }} {% endfor %}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "result": "garden sports "
    },
    {
      "name": "tags, for, simple hash loop",
      "template": "{% for c in collection %}{{ c[0] }} {{ c[1] }} {% endfor %}",
      "data": {
        "collection": {
          "title": "foo",
          "description": "bar"
        }
      },
      "result": "title foo description bar "
    },
    {
      "name": "tags, for, empty array with default",
      "template": "{% for img in emptythings.array %}{{ img.url }} {% else %}no images{% endfor %}",
      "data": {
        "emptythings": {
          "array": [],
          "map": {},
          "string": ""
        }
      },
      "result": "no images"
    },
    {
      "name": "tags, for, break",
      "template": "{% for tag in product.tags %}{% if tag == 'sports' %}{% break %}{% else %}{{ tag }} {% endif %}{% else %}no images{% endfor %}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "result": ""
    },
    {
      "name": "tags, for, continue",
      "template": "{% for tag in product.tags %}{% if tag == 'sports' %}{% continue %}{% else %}{{ tag }} {% endif %}{% else %}no images{% endfor %}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "result": "garden "
    },
    {
      "name": "tags, for, limit",
      "template": "{% for tag in product.tags limit:1 %}{{ tag }} {% endfor %}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "result": "sports "
    },
    {
      "name": "tags, for, offset",
      "template": "{% for tag in product.tags offset:1 %}{{ tag }} {% endfor %}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "result": "garden "
    },
    {
      "name": "tags, for, forloop length",
      "template": "{% for tag in product.tags %}{{ forloop.length }} {% endfor %}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "result": "2 2 "
    },
    {
      "name": "tags, for, forloop length with limit",
      "template": "{% for tag in tags limit:3 %}{{ forloop.length }} {% endfor %}",
      "data": {
        "tags": [
          "sports",
          "garden",
          "home",
          "diy",
          "motoring",
          "fashion"
        ]
      },
      "result": "3 3 3 "
    },
    {
      "name": "tags, for, forloop length with offset",
      "template": "{% for tag in tags offset:3 %}{{ forloop.length }} {% endfor %}",
      "data": {
        "tags": [
          "sports",
          "garden",
          "home",
          "diy",
          "motoring",
          "fashion"
        ]
      },
      "result": "3 3 3 "
    },
    {
      "name": "tags, for, forloop goes out of scope",
      "template": "{% for tag in product.tags %}{{ forloop.length }} {% endfor %}{{ forloop.length }}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "result": "2 2 "
    },
    {
      "name": "tags, for, forloop.first",
      "template": "{% for tag in product.tags %}{{ forloop.first }} {% endfor %}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "result": "true false "
    },
    {
      "name": "tags, for, forloop.last",
      "template": "{% for tag in product.tags %}{{ forloop.last }} {% endfor %}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "result": "false true "
    },
    {
      "name": "tags, for, forloop.index",
      "template": "{% for tag in product.tags %}{{ forloop.index }} {% endfor %}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "result": "1 2 "
    },
    {
      "name": "tags, for, forloop.index0",
      "template": "{% for tag in product.tags %}{{ forloop.index0 }} {% endfor %}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "result": "0 1 "
    },
    {
      "name": "tags, for, forloop.rindex",
      "template": "{% for tag in product.tags %}{{ forloop.rindex }} {% endfor %}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "result": "2 1 "
    },
    {
      "name": "tags, for, forloop.rindex0",
      "template": "{% for tag in product.tags %}{{ forloop.rindex0 }} {% endfor %}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "result": "1 0 "
    },
    {
      "name": "tags, for, forloop name",
      "template": "{% for tag in product.tags limit:1 %}{{ forloop.name }}{% endfor %}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "result": "tag-product.tags"
    },
    {
      "name": "tags, for, forloop name of a range",
      "template": "{% for i in (1..3) limit:1 %}{{ forloop.name }}{% endfor %}",
      "result": "i-(1..3)"
    },
    {
      "name": "tags, for, forloop no such attribute",
      "template": "{% for tag in product.tags %}{{ forloop.nosuchthing }}{% endfor %}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "result": ""
    },
    {
      "name": "tags, for, iterate an empty array",
      "template": "{% for item in emptythings.array %}{{ item }}{% endfor %}",
      "data": {
        "emptythings": {
          "array": [],
          "map": {},
          "string": ""
        }
      },
      "result": ""
    },
    {
      "name": "tags, for, iterate an empty array with default",
      "template": "{% for item in emptythings.array %}{{ item }}{% else %}foo{% endfor %}",
      "data": {
        "emptythings": {
          "array": [],
          "map": {},
          "string": ""
        }
      },
      "result": "foo"
    },
    {
      "name": "tags, for, lookup a filter from an outer context",
      "template": "{% for tag in product.tags %}{{ tag | upcase }} {% endfor %}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "result": "SPORTS GARDEN "
    },
    {
      "name": "tags, for, assign inside loop",
      "template": "{% for tag in product.tags %}{% assign x = tag %}{% endfor %}{{ x }}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "result": "garden"
    },
    {
      "name": "tags, for, blank empty loops",
      "template": "{% for i in (0..10) %}  {% endfor %}",
      "result": ""
    },
    {
      "name": "tags, for, loop over nested and chained object from context with trailing identifier",
      "template": "{% for link in linklists[section.settings.menu].links %}{{ link }} {% endfor %}",
      "data": {
        "linklists": {
          "main": {
            "links": [
              "1",
              "2"
            ]
          }
        },
        "section": {
          "settings": {
            "menu": "main"
          }
        }
      },
      "result": "1 2 "
    },
    {
      "name": "tags, for, loop over undefined",
      "template": "{% for tag in nosuchthing %}{{ tag }}{% endfor %}",
      "result": ""
    },
    {
      "name": "tags, for, continue a loop",
      "template": "{% for item in array limit: 3 %}a{{ item }} {% endfor %}{% for item in array offset: continue %}b{{ item }} {% endfor %}",
      "data": {
        "array": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "result": "a1 a2 a3 b4 b5 b6 "
    },
    {
      "name": "tags, for, continue a loop over an assigned range",
      "template": "{% assign nums = (1..5) %}{% for item in nums limit: 3 %}a{{ item }} {% endfor %}{% for item in nums offset: continue %}b{{ item }} {% endfor %}",
      "result": "a1 a2 a3 b4 b5 "
    },
    {
      "name": "tags, for, continue a loop over a changing array",
      "template": "{% assign foo = '1,2,3,4,5,6' | split: ',' %}{% for item in foo limit: 3 %}{{ item }} {% endfor %}{% assign foo = 'u,v,w,x,y,z' | split: ',' %}{% for item in foo offset: continue %}{{ item }} {% endfor %}",
      "result": "1 2 3 x y z "
    },
    {
      "name": "tags, for, continue with changing loop var",
      "template": "{% for foo in array limit: 3 %}{{ foo }} {% endfor %}{% for bar in array offset: continue %}{{ bar }} {% endfor %}",
      "data": {
        "array": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "result": "1 2 3 1 2 3 4 5 6 "
    },
    {
      "name": "tags, for, nothing to continue from",
      "template": "{% for item in array %}a{{ item }} {% endfor %}{% for item in array offset: continue %}b{{ item }} {% endfor %}",
      "data": {
        "array": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "result": "a1 a2 a3 a4 a5 a6 "
    },
    {
      "name": "tags, for, offset continue without preceding loop",
      "template": "{% for item in array offset: continue %}{{ item }} {% endfor %}",
      "data": {
        "array": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "result": "1 2 3 4 5 6 "
    },
    {
      "name": "tags, for, continue from a limit that is greater than length",
      "template": "{% for item in array limit: 99 %}a{{ item }} {% endfor %}{% for item in array offset: continue %}b{{ item }} {% endfor %}",
      "data": {
        "array": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "result": "a1 a2 a3 a4 a5 a6 "
    },
    {
      "name": "tags, for, continue from a range expression",
      "template": "{% for item in (1..6) limit: 3 %}a{{ item }} {% endfor %}{% for item in (1..6) offset: continue %}b{{ item }} {% endfor %}",
      "data": {
        "array": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "result": "a1 a2 a3 b4 b5 b6 "
    },
    {
      "name": "tags, for, offset continue twice with limit",
      "template": "{% for item in (1..6) limit: 2 %}a{{ item }} {% endfor %}{% for item in (1..6) limit: 2 offset: continue %}b{{ item }} {% endfor %}{% for item in (1..6) offset: continue %}c{{ item }} {% endfor %}",
      "result": "a1 a2 b3 b4 c5 c6 "
    },
    {
      "name": "tags, for, offset continue twice with changing limit",
      "template": "{% for item in (1..6) limit: 2 %}a{{ item }} {% endfor %}{% for item in (1..6) limit: 3 offset: continue %}b{{ item }} {% endfor %}{% for item in (1..6) offset: continue %}c{{ item }} {% endfor %}",
      "result": "a1 a2 b3 b4 b5 c6 "
    },
    {
      "name": "tags, for, offset continue twice with no second limit",
      "template": "{% for item in (1..6) limit: 2 %}a{{ item }} {% endfor %}{% for item in (1..6) offset: continue %}b{{ item }} {% endfor %}{% for item in (1..6) offset: continue %}c{{ item }} {% endfor %}",
      "result": "a1 a2 b3 b4 b5 b6 "
    },
    {
      "name": "tags, for, offset continue from a broken loop",
      "template": "{% for item in (1..6) limit: 4 %}{% if item == 3 %}{% break %}{% endif %}a{{ item }} {% endfor %}{% for item in (1..6) offset: continue %}b{{ item }} {% endfor %}",
      "result": "a1 a2 b5 b6 "
    },
    {
      "name": "tags, for, offset continue from a broken loop with preceding limit",
      "template": "{% for item in (1..6) limit: 3 %}a{{ item }} {% endfor %}{% for item in (1..6) %}{% if item == 3 %}{% break %}{% endif %}b{{ item }} {% endfor %}{% for item in (1..6) offset: continue %}c{{ item }} {% endfor %}",
      "result": "a1 a2 a3 b1 b2 "
    },
    {
      "name": "tags, for, offset continue forloop length",
      "template": "{% for item in (1..6) limit: 2 %}a{{ item }} - {{ forloop.length }}, {% endfor %}{% for item in (1..6) offset: continue %}b{{ item }} - {{ forloop.length }}, {% endfor %}",
      "result": "a1 - 2, a2 - 2, b3 - 4, b4 - 4, b5 - 4, b6 - 4, "
    },
    {
      "name": "tags, for, parentloop is normally undefined",
      "template": "{% for i in (1..2)%}{{ forloop.parentloop.index }}{% endfor %}",
      "result": ""
    },
    {
      "name": "tags, for, access parentloop",
      "template": "{% for i in (1..2)%}{% for j in (1..2) %}{{ i }} {{j}} {{ forloop.parentloop.index }} {{ forloop.index }} {% endfor %}{% endfor %}",
      "result": "1 1 1 1 1 2 1 2 2 1 2 1 2 2 2 2 "
    },
    {
      "name": "tags, for, parentloop goes out of scope",
      "template": "{% for i in (1..2)%}{% for j in (1..2) %}{{ i }} {{ j }} {% endfor %}{{ forloop.parentloop.index }}{% endfor %}",
      "result": "1 1 1 2 2 1 2 2 "
    },
    {
      "name": "tags, for, parent's parentloop",
      "template": "{% for i in (1..2) %}{% for j in (1..2) %}{% for k in (1..2) %}i={{ forloop.parentloop.parentloop.index }} j={{ forloop.parentloop.index }} k={{ forloop.index }} {% endfor %}{% endfor %}{% endfor %}",
      "result": "i=1 j=1 k=1 i=1 j=1 k=2 i=1 j=2 k=1 i=1 j=2 k=2 i=2 j=1 k=1 i=2 j=1 k=2 i=2 j=2 k=1 i=2 j=2 k=2 "
    },
    {
      "name": "tags, for, loop over an existing range object",
      "template": "{% assign foo = (1..3) %}{{ foo | join: '#' }}{% for i in foo %}{{ i }}{% endfor %}{% for i in foo %}{{ i }}{% endfor %}",
      "result": "1#2#3123123"
    },
    {
      "name": "tags, for, loop over range with float start",
      "template": "{% assign x = (2.4..5) %}{% for i in x %}{{ i }}{% endfor %}",
      "result": "2345"
    },
    {
      "name": "tags, for, share outer scope",
      "template": "{% assign foo = 'hello' %}{% for x in (1..3) %}{% assign foo = x %}{% endfor %}{{ foo }}",
      "result": "3"
    },
    {
      "name": "tags, for, offset and limit",
      "template": "{% for tag in tags limit: 3 offset: 1 %}{{ tag }} {% endfor %}",
      "data": {
        "tags": [
          "sports",
          "garden",
          "home",
          "diy",
          "motoring",
          "fashion"
        ]
      },
      "result": "garden home diy "
    },
    {
      "name": "tags, for, first and last with an offset and limit",
      "template": "{% for tag in tags limit: 2 offset: 1 %}{{ tag }} {{ forloop.first }} {{ forloop.last }} {% endfor %}",
      "data": {
        "tags": [
          "sports",
          "garden",
          "home",
          "diy",
          "motoring",
          "fashion"
        ]
      },
      "result": "garden true false home false true "
    },
    {
      "name": "tags, for, first and last with offset continue",
      "template": "{% for tag in product.tags limit: 1 %}{% endfor %}{% for tag in product.tags offset: continue %}{{ forloop.first }} {{ forloop.last }} {% endfor %}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden",
            "home",
            "diy",
            "motoring",
            "fashion"
          ]
        }
      },
      "result": "true false false false false false false false false true "
    },
    {
      "name": "tags, for, range start and stop are the same",
      "template": "{% for i in (1..1) %}{{ i }} {% endfor %}",
      "result": "1 "
    },
    {
      "name": "tags, for, range start and stop are zero",
      "template": "{% for i in (0..0) %}{{ i }} {% endfor %}",
      "result": "0 "
    },
    {
      "name": "tags, for, limit is a string",
      "template": "{% for i in (1..4) limit: '2' %}{{ i }} {% endfor %}",
      "result": "1 2 "
    },
    {
      "name": "tags, for, offset is a string",
      "template": "{% for i in (1..4) offset: '2' %}{{ i }} {% endfor %}",
      "result": "3 4 "
    },
    {
      "name": "tags, for, limit is a non-number string",
      "template": "{% for i in (1..4) limit: 'foo' %}{{ i }} {% endfor %}",
      "invalid": true
    },
    {
      "name": "tags, for, offset is a non-number string",
      "template": "{% for i in (1..4) offset: 'foo' %}{{ i }} {% endfor %}",
      "invalid": true
    },
    {
      "name": "tags, for, limit is not a string or number",
      "template": "{% for i in (1..4) limit: foo %}{{ i }} {% endfor %}",
      "data": {
        "foo": [
          1,
          2,
          3
        ]
      },
      "invalid": true
    },
    {
      "name": "tags, for, offset is not a string or number",
      "template": "{% for i in (1..4) offset: foo %}{{ i }} {% endfor %}",
      "data": {
        "foo": [
          1,
          2,
          3
        ]
      },
      "invalid": true
    },
    {
      "name": "tags, for, comma separated arguments",
      "template": "{% for i in (1..6), limit: 4, offset: 2 %}{{ i }} {% endfor %}",
      "result": "3 4 5 6 "
    },
    {
      "name": "tags, for, some comma separated arguments",
      "template": "{% for i in (1..6) limit: 4, offset: 2, %}{{ i }} {% endfor %}",
      "result": "3 4 5 6 "
    },
    {
      "name": "tags, for, loop over a string literal",
      "template": "{% for i in 'hello' %}{{ i }} {% endfor %}",
      "result": "hello "
    },
    {
      "name": "tags, for, loop over a string variable",
      "template": "{% for i in foo %}{{ i }} {% endfor %}",
      "data": {
        "foo": "hello"
      },
      "result": "hello "
    },
    {
      "name": "tags, if, condition with literal consequence",
      "template": "{% if product.title == 'foo' %}bar{% endif %}",
      "data": {
        "product": {
          "title": "foo"
        }
      },
      "result": "bar"
    },
    {
      "name": "tags, if, condition with literal consequence and literal alternative",
      "template": "{% if product.title == 'hello' %}bar{% else %}baz{% endif %}",
      "data": {
        "product": {
          "title": "foo"
        }
      },
      "result": "baz"
    },
    {
      "name": "tags, if, condition with conditional alternative",
      "template": "{% if product.title == 'hello' %}foo{% elsif product.title == 'foo' %}bar{% endif %}",
      "data": {
        "product": {
          "title": "foo"
        }
      },
      "result": "bar"
    },
    {
      "name": "tags, if, condition with conditional alternative and final alternative",
      "template": "{% if product.title == 'hello' %}foo{% elsif product.title == 'goodbye' %}bar{% else %}baz{% endif %}",
      "data": {
        "product": {
          "title": "foo"
        }
      },
      "result": "baz"
    },
    {
      "name": "tags, if, non-empty hash is truthy",
      "template": "{% if product %}bar{% else %}foo{% endif %}",
      "data": {
        "product": {
          "title": "foo"
        }
      },
      "result": "bar"
    },
    {
      "name": "tags, if, literal nil is falsy",
      "template": "{% if nil %}bar{% else %}foo{% endif %}",
      "result": "foo"
    },
    {
      "name": "tags, if, undefined variables are falsy",
      "template": "{% if nosuchthing %}bar{% else %}foo{% endif %}",
      "result": "foo"
    },
    {
      "name": "tags, if, nested condition in the consequence block",
      "template": "{% if product %}{% if title == 'Hello' %}baz{% endif %}{% endif %}",
      "data": {
        "product": {
          "title": "foo"
        },
        "title": "Hello"
      },
      "result": "baz"
    },
    {
      "name": "tags, if, nested condition, alternative in the consequence block",
      "template": "{% if product %}{% if title == 'goodbye' %}baz{% else %}hello{% endif %}{% endif %}",
      "data": {
        "product": {
          "title": "foo"
        },
        "title": "Hello"
      },
      "result": "hello"
    },
    {
      "name": "tags, if, literal false condition",
      "template": "{% if false %}{% endif %}",
      "result": ""
    },
    {
      "name": "tags, if, contains condition",
      "template": "{% if product.tags contains 'garden' %}baz{% endif %}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "result": "baz"
    },
    {
      "name": "tags, if, not equal condition",
      "template": "{% if product.title != 'foo' %}baz{% endif %}",
      "data": {
        "product": {
          "title": "foo"
        }
      },
      "result": ""
    },
    {
      "name": "tags, if, alternate not equal condition",
      "template": "{% if product.title <> 'foo' %}baz{% endif %}",
      "data": {
        "product": {
          "title": "foo"
        }
      },
      "result": ""
    },
    {
      "name": "tags, if, blocks that contain only whitespace are not rendered",
      "template": "{% if true %}  {% elsif false %} {% else %} {% endif %}",
      "result": ""
    },
    {
      "name": "tags, if, blocks that contain only whitespace and comments are not rendered",
      "template": "{% if true %} {% comment %} this is blank {% endcomment %} {% endif %}",
      "result": ""
    },
    {
      "name": "tags, if, conditional alternative with default",
      "template": "{% if false %}foo{% elsif false %}bar{% else %}hello{% endif %}",
      "result": "hello"
    },
    {
      "name": "tags, if, range equals range",
      "template": "{% assign foo = (1..3) %}{% if foo == (1..3) %}true{% else %}false{% endif %}",
      "result": "true"
    },
    {
      "name": "tags, if, logical operators are right associative",
      "template": "{% if true and false and false or true %}hello{% endif %}",
      "result": ""
    },
    {
      "name": "tags, if, zero is not equal to false",
      "template": "{% if 0 == false %}Hello{% else %}Goodbye{% endif %}",
      "result": "Goodbye"
    },
    {
      "name": "tags, if, zero is truthy",
      "template": "{% if 0 %}Hello{% else %}Goodbye{% endif %}",
      "result": "Hello"
    },
    {
      "name": "tags, if, 0.0 is truthy",
      "template": "{% if 0.0 %}Hello{% else %}Goodbye{% endif %}",
      "result": "Hello"
    },
    {
      "name": "tags, if, one is not equal to true",
      "template": "{% if 1 == true %}Hello{% else %}Goodbye{% endif %}",
      "result": "Goodbye"
    },
    {
      "name": "tags, if, array is equal to array",
      "template": "{% assign x = 'a,b,c' | split: ',' %}{% assign y = 'a,b,c' | split: ',' %}{% if x == y %}true{% else %}false{% endif %}",
      "result": "true"
    },
    {
      "name": "tags, if, array is equal to array from context",
      "template": "{% assign y = 'a,b,c' | split: ',' %}{% if x == y %}true{% else %}false{% endif %}",
      "data": {
        "x": [
          "a",
          "b",
          "c"
        ]
      },
      "result": "true"
    },
    {
      "name": "tags, if, string does not equal int",
      "template": "{% if '1' == 1 %}true{% else %}false{% endif %}",
      "result": "false"
    },
    {
      "name": "tags, if, int does not equal string",
      "template": "{% if 1 == '1' %}true{% else %}false{% endif %}",
      "result": "false"
    },
    {
      "name": "tags, if, int equals float",
      "template": "{% if 1 == 1.0 %}true{% else %}false{% endif %}",
      "result": "true"
    },
    {
      "name": "tags, if, string greater than int",
      "template": "{% if '2' > 1 %}true{% else %}false{% endif %}",
      "invalid": true
    },
    {
      "name": "tags, if, string is less than string",
      "template": "{% if 'abc' < 'acb' %}true{% else %}false{% endif %}",
      "result": "true"
    },
    {
      "name": "tags, if, string is not less than string",
      "template": "{% if 'bbb' < 'aaa' %}true{% else %}false{% endif %}",
      "result": "false"
    },
    {
      "name": "tags, if, string is less than or equal to string",
      "template": "{% if 'abc' <= 'acb' %}true{% else %}false{% endif %}",
      "result": "true"
    },
    {
      "name": "tags, if, string is not less than or equal to string",
      "template": "{% if 'bbb' <= 'aaa' %}true{% else %}false{% endif %}",
      "result": "false"
    },
    {
      "name": "tags, if, string is greater than string",
      "template": "{% if 'abc' > 'acb' %}true{% else %}false{% endif %}",
      "result": "false"
    },
    {
      "name": "tags, if, string is not greater than string",
      "template": "{% if 'bbb' > 'aaa' %}true{% else %}false{% endif %}",
      "result": "true"
    },
    {
      "name": "tags, if, string is greater than or equal to string",
      "template": "{% if 'abc' >= 'acb' %}true{% else %}false{% endif %}",
      "result": "false"
    },
    {
      "name": "tags, if, string is not greater than or equal to string",
      "template": "{% if 'bbb' >= 'aaa' %}true{% else %}false{% endif %}",
      "result": "true"
    },
    {
      "name": "tags, if, else tag expressions are ignored",
      "template": "{% if false %}1{% else nonsense %}2{% endif %}",
      "tags": [
        "strict"
      ],
      "result": "2"
    },
    {
      "name": "tags, if, extra else blocks are ignored",
      "template": "{% if false %}1{% else %}2{% else %}3{% endif %}",
      "tags": [
        "strict"
      ],
      "result": "2"
    },
    {
      "name": "tags, if, extra elsif blocks are ignored",
      "template": "{% if false %}1{% else %}2{% elsif true %}3{% endif %}",
      "tags": [
        "strict"
      ],
      "result": "2"
    },
    {
      "name": "tags, if, empty array equals special empty",
      "template": "{% if x == empty %}TRUE{% else %}FALSE{% endif %}",
      "data": {
        "x": []
      },
      "result": "TRUE"
    },
    {
      "name": "tags, if, empty array is truthy",
      "template": "{% if x %}TRUE{% else %}FALSE{% endif %}",
      "data": {
        "x": []
      },
      "result": "TRUE"
    },
    {
      "name": "tags, if, empty object equals special empty",
      "template": "{% if x == empty %}TRUE{% else %}FALSE{% endif %}",
      "data": {
        "x": {}
      },
      "result": "TRUE"
    },
    {
      "name": "tags, if, empty object is truthy",
      "template": "{% if x %}TRUE{% else %}FALSE{% endif %}",
      "data": {
        "x": {}
      },
      "result": "TRUE"
    },
    {
      "name": "tags, if, empty string is truthy",
      "template": "{% if '' %}TRUE{% else %}FALSE{% endif %}",
      "result": "TRUE"
    },
    {
      "name": "tags, if, string contains string",
      "template": "{% if 'hello' contains 'llo' %}TRUE{% else %}FALSE{% endif %}",
      "result": "TRUE"
    },
    {
      "name": "tags, if, string contains int",
      "template": "{% if 'hel9lo' contains 9 %}TRUE{% else %}FALSE{% endif %}",
      "result": "TRUE"
    },
    {
      "name": "tags, if, string contains string from context",
      "template": "{% if 'hello' contains s %}TRUE{% else %}FALSE{% endif %}",
      "data": {
        "s": "llo"
      },
      "result": "TRUE"
    },
    {
      "name": "tags, if, context string contains string from context",
      "template": "{% if t contains s %}TRUE{% else %}FALSE{% endif %}",
      "data": {
        "s": "llo",
        "t": "hello"
      },
      "result": "TRUE"
    },
    {
      "name": "tags, if, undefined is equal to nil",
      "template": "{% if nosuchthing == nil %}TRUE{% else %}FALSE{% endif %}",
      "result": "TRUE"
    },
    {
      "name": "tags, if, undefined is equal to null",
      "template": "{% if nosuchthing == null %}TRUE{% else %}FALSE{% endif %}",
      "result": "TRUE"
    },
    {
      "name": "tags, if, string contains undefined",
      "template": "{% if s contains nosuchthing %}TRUE{% else %}FALSE{% endif %}",
      "data": {
        "s": "hello"
      },
      "result": "FALSE"
    },
    {
      "name": "tags, if, array contains undefined",
      "template": "{% if a contains nosuchthing %}TRUE{% else %}FALSE{% endif %}",
      "data": {
        "a": [
          1,
          2,
          3,
          null
        ]
      },
      "result": "FALSE"
    },
    {
      "name": "tags, if, array contains false",
      "template": "{% if a contains false %}TRUE{% else %}FALSE{% endif %}",
      "data": {
        "a": [
          1,
          2,
          3,
          false
        ]
      },
      "result": "FALSE"
    },
    {
      "name": "tags, if, object contains undefined",
      "template": "{% if obj contains nosuchthing %}TRUE{% else %}FALSE{% endif %}",
      "data": {
        "obj": {
          "foo": "bar"
        }
      },
      "result": "FALSE"
    },
    {
      "name": "tags, if, string contains nil",
      "template": "{% if s contains nil %}TRUE{% else %}FALSE{% endif %}",
      "data": {
        "s": "hello"
      },
      "result": "FALSE"
    },
    {
      "name": "tags, if, array contains nil",
      "template": "{% if a contains nil %}TRUE{% else %}FALSE{% endif %}",
      "data": {
        "a": [
          1,
          2,
          null
        ]
      },
      "result": "FALSE"
    },
    {
      "name": "tags, if, object contains nil",
      "template": "{% if obj contains nosuchthing %}TRUE{% else %}FALSE{% endif %}",
      "data": {
        "obj": {
          "foo": "bar"
        }
      },
      "result": "FALSE"
    },
    {
      "name": "tags, if, undefined contains string",
      "template": "{% if undefined contains s %}TRUE{% else %}FALSE{% endif %}",
      "data": {
        "s": "hello"
      },
      "result": "FALSE"
    },
    {
      "name": "tags, if, undefined contains array",
      "template": "{% if undefined contains a %}TRUE{% else %}FALSE{% endif %}",
      "data": {
        "a": [
          1,
          2,
          3
        ]
      },
      "result": "FALSE"
    },
    {
      "name": "tags, if, undefined contains object",
      "template": "{% if undefined contains obj %}TRUE{% else %}FALSE{% endif %}",
      "data": {
        "obj": {
          "foo": "bar"
        }
      },
      "result": "FALSE"
    },
    {
      "name": "tags, if, undefined contains undefined",
      "template": "{% if undefined contains thing %}TRUE{% else %}FALSE{% endif %}",
      "result": "FALSE"
    },
    {
      "name": "tags, if, startswith is not a valid operator",
      "template": "{% if s startswith t %}TRUE{% else %}FALSE{% endif %}",
      "data": {
        "s": "hello",
        "t": "hell"
      },
      "tags": [
        "absent"
      ],
      "invalid": true
    },
    {
      "name": "tags, if, endswith is not a valid operator",
      "template": "{% if s endswith t %}TRUE{% else %}FALSE{% endif %}",
      "data": {
        "s": "hello",
        "t": "lo"
      },
      "tags": [
        "absent"
      ],
      "invalid": true
    },
    {
      "name": "tags, if, haskey is not a valid operator",
      "template": "{% if obj haskey x %}TRUE{% else %}FALSE{% endif %}",
      "data": {
        "obj": {
          "foo": "bar"
        },
        "x": "foo"
      },
      "tags": [
        "absent"
      ],
      "invalid": true
    },
    {
      "name": "tags, if, in is not a valid operator",
      "template": "{% if t in s %}TRUE{% else %}FALSE{% endif %}",
      "data": {
        "s": "hello",
        "t": "lo"
      },
      "tags": [
        "absent"
      ],
      "invalid": true
    },
    {
      "name": "tags, if, not is not a valid operator",
      "template": "{% if not false %}TRUE{% else %}FALSE{% endif %}",
      "tags": [
        "absent"
      ],
      "invalid": true
    },
    {
      "name": "tags, ifchanged, changed from initial state",
      "template": "{% ifchanged %}hello{% endifchanged %}",
      "result": "hello"
    },
    {
      "name": "tags, ifchanged, not changed from initial state",
      "template": "{% ifchanged %}{% endifchanged %}",
      "result": ""
    },
    {
      "name": "tags, ifchanged, no change from assign",
      "template": "{% assign foo = 'hello' %}{% ifchanged %}{{ foo }}{% endifchanged %}{% ifchanged %}{{ foo }}{% endifchanged %}",
      "result": "hello"
    },
    {
      "name": "tags, ifchanged, change from assign",
      "template": "{% assign foo = 'hello' %}{% ifchanged %}{{ foo }}{% endifchanged %}{% ifchanged %}{{ foo }}{% endifchanged %}{% assign foo = 'goodbye' %}{% ifchanged %}{{ foo }}{% endifchanged %}",
      "result": "hellogoodbye"
    },
    {
      "name": "tags, ifchanged, within for loop",
      "template": "{% assign list = \"1,3,2,1,3,1,2\" | split: \",\" | sort %}{% for item in list -%}{%- ifchanged %} {{ item }}{% endifchanged -%}{%- endfor %}",
      "result": " 1 2 3"
    },
    {
      "name": "tags, include, string literal name",
      "template": "{% include 'product-hero' %}",
      "data": {
        "product": {
          "title": "foo",
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "templates": {
        "product-hero": "{{ product.title }}\n{% for tag in product.tags %}- {{ tag }}\n{% endfor %}"
      },
      "result": "foo\n- sports\n- garden\n"
    },
    {
      "name": "tags, include, name from identifier",
      "template": "{% include snippet %}",
      "data": {
        "snippet": "product-hero",
        "product": {
          "title": "foo",
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "templates": {
        "product-hero": "{{ product.title }}\n{% for tag in product.tags %}- {{ tag }}\n{% endfor %}"
      },
      "result": "foo\n- sports\n- garden\n"
    },
    {
      "name": "tags, include, bound variable",
      "template": "{% include 'product-title' with collection.products[1] %}",
      "data": {
        "collection": {
          "products": [
            {
              "title": "bike"
            },
            {
              "title": "car"
            }
          ]
        }
      },
      "templates": {
        "product-title": "{{ product-title.title }}"
      },
      "result": "car"
    },
    {
      "name": "tags, include, bound variable does not exist",
      "template": "{% include 'product-title' with no.such.thing %}",
      "templates": {
        "product-title": "{{ product-title.title }}"
      },
      "result": ""
    },
    {
      "name": "tags, include, bound array variable",
      "template": "{% include 'prod' for collection.products %}",
      "data": {
        "collection": {
          "products": [
            {
              "title": "bike"
            },
            {
              "title": "car"
            }
          ]
        }
      },
      "templates": {
        "prod": "{{ prod.title }}"
      },
      "result": "bikecar"
    },
    {
      "name": "tags, include, bound variable with alias",
      "template": "{% include 'product-alias' with collection.products[1] as product %}",
      "data": {
        "collection": {
          "products": [
            {
              "title": "bike"
            },
            {
              "title": "car"
            }
          ]
        }
      },
      "templates": {
        "product-alias": "{{ product.title }}"
      },
      "result": "car"
    },
    {
      "name": "tags, include, some keyword arguments",
      "template": "{% include 'product-args', foo: 'hello', bar: 'there' %}",
      "templates": {
        "product-args": "{{ foo }} {{ bar }}"
      },
      "result": "hello there"
    },
    {
      "name": "tags, include, some keyword arguments without leading comma",
      "template": "{% include 'product-args' foo: 'hello', bar: 'there' %}",
      "templates": {
        "product-args": "{{ foo }} {{ bar }}"
      },
      "result": "hello there"
    },
    {
      "name": "tags, include, some keyword arguments with float literals",
      "template": "{% include 'product-args' foo: 1.1, bar: 'there' %}",
      "templates": {
        "product-args": "{{ foo }} {{ bar }}"
      },
      "result": "1.1 there"
    },
    {
      "name": "tags, include, some keyword arguments with range literal",
      "template": "{% include 'product-args' foo: (1..3), bar: 'there' %}",
      "templates": {
        "product-args": "{{ foo | join: '#' }} {{ bar }}"
      },
      "result": "1#2#3 there"
    },
    {
      "name": "tags, include, use globals from outer scope",
      "template": "{% include 'outer-scope' %}",
      "data": {
        "customer": {
          "first_name": "Holly"
        }
      },
      "templates": {
        "outer-scope": "Hello, {{ customer.first_name }}"
      },
      "result": "Hello, Holly"
    },
    {
      "name": "tags, include, assign persists in outer scope",
      "template": "{% include 'assign-outer-scope' %} {{ last_name }}",
      "data": {
        "customer": {
          "first_name": "Holly"
        }
      },
      "templates": {
        "assign-outer-scope": "Hello, {{ customer.first_name }}{% assign last_name = 'Smith' %}"
      },
      "result": "Hello, Holly Smith"
    },
    {
      "name": "tags, include, counter from outer scope",
      "template": "{% increment foo %} {% include 'increment-outer-scope' %} {% increment foo %}",
      "templates": {
        "increment-outer-scope": "{% increment foo %}"
      },
      "result": "0 1 2"
    },
    {
      "name": "tags, include, break from include",
      "template": "{% for tag in product.tags %}{% include 'tag-break' %}{% endfor %}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "templates": {
        "tag-break": "{{ tag | upcase }}{% break %}"
      },
      "result": "SPORTS"
    },
    {
      "name": "tags, include, break from nested include",
      "template": "{% for tag in product.tags %}{% include 'tag' %}{% endfor %}",
      "data": {
        "product": {
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "templates": {
        "tag": "{{ tag | upcase }}{% include 'break' %}",
        "break": " break!{% break %}"
      },
      "result": "SPORTS break!"
    },
    {
      "name": "tags, include, keyword arguments go out of scope",
      "template": "{% include 'product-args', foo: 'hello', bar: 'there' %}{{ foo }}",
      "templates": {
        "product-args": "{{ foo }} {{ bar }}"
      },
      "result": "hello there"
    },
    {
      "name": "tags, include, assign to a keyword argument",
      "template": "{% include 'product-args', foo: 'hello' %} {{ foo }}",
      "templates": {
        "product-args": "{{ foo }}{% assign foo = 'goodbye' %} {{ foo }}"
      },
      "result": "hello hello goodbye"
    },
    {
      "name": "tags, increment, named counter",
      "template": "{% increment foo %} {% increment foo %} {% increment foo %}",
      "result": "0 1 2"
    },
    {
      "name": "tags, increment, incrementing counter renders before incrementing",
      "template": "{% increment foo %} {{ foo }}",
      "result": "0 1"
    },
    {
      "name": "tags, increment, multiple named counters",
      "template": "{% increment foo %} {% increment bar %} {% increment foo %} {% increment bar %}",
      "result": "0 0 1 1"
    },
    {
      "name": "tags, increment, assign and increment",
      "template": "{% assign foo = 5 %}{{ foo }} {% increment foo %} {% increment foo %} {{ foo }}",
      "result": "5 0 1 5"
    },
    {
      "name": "tags, increment, named counters are in scope for subsequent expressions",
      "template": "{% increment foo %} {% increment foo %} {% if foo > 0 %}{{ foo }}{% endif %}",
      "result": "0 1 2"
    },
    {
      "name": "tags, inline comment, with whitespace control and padding",
      "template": "{%- # some comment -%}",
      "result": ""
    },
    {
      "name": "tags, inline comment, with whitespace control no padding",
      "template": "{%-# some comment -%}",
      "result": ""
    },
    {
      "name": "tags, inline comment, no whitespace control with padding",
      "template": "{% # some comment %}",
      "result": ""
    },
    {
      "name": "tags, inline comment, no whitespace control no padding",
      "template": "{%# some comment %}",
      "result": ""
    },
    {
      "name": "tags, inline comment, no padding after the hash",
      "template": "{%#some comment %}",
      "result": ""
    },
    {
      "name": "tags, inline comment, empty",
      "template": "{%#%}",
      "result": ""
    },
    {
      "name": "tags, inline comment, liquid tag",
      "template": "{% liquid \n  # first comment line\n  # second comment line\n\n  # another comment line\n  echo 'Hello '\n\n  # more comments\n  echo 'goodbye'\n-%}",
      "result": "Hello goodbye"
    },
    {
      "name": "tags, inline comment, multiple lines",
      "template": "{%-\n  # spread inline comments\n  # over multiple lines\n-%}",
      "result": ""
    },
    {
      "name": "tags, inline comment, lots of hashes in a liquid tag",
      "template": "{% liquid\n  ##########################\n  # spread inline comments #\n  ##########################\n-%}",
      "result": ""
    },
    {
      "name": "tags, inline comment, enforce leading hash",
      "template": "{%-\n  # spread inline comments\n  over multiple lines\n-%}",
      "invalid": true
    },
    {
      "name": "tags, inline comment, can't comment tags",
      "template": "{%- # {% echo 'hello world' %} -%}",
      "result": " -%}"
    },
    {
      "name": "tags, inline comment, comment with single quote",
      "template": "{%# some 'comment %}",
      "result": ""
    },
    {
      "name": "tags, inline comment, comment with single quoted string",
      "template": "{%# some 'comment' %}",
      "result": ""
    },
    {
      "name": "tags, inline comment, comment with double quote",
      "template": "{%# some \"comment %}",
      "result": ""
    },
    {
      "name": "tags, inline comment, comment with double quoted string",
      "template": "{%# some \"comment\" %}",
      "result": ""
    },
    {
      "name": "tags, inline comment, comment with u2018",
      "template": "{%# some ‘comment %}",
      "result": ""
    },
    {
      "name": "tags, inline comment, comment with u201C",
      "template": "{%# some “comment %}",
      "result": ""
    },
    {
      "name": "tags, liquid, newline terminated tags",
      "template": "{% liquid\nif product.title\n   echo product.title | upcase\nelse\n   echo 'product-1' | upcase \nendif\n\nfor i in (0..5)\n   echo i\nendfor %}",
      "data": {
        "product": {
          "title": "foo"
        }
      },
      "result": "FOO012345"
    },
    {
      "name": "tags, liquid, carriage return and newline terminated tags",
      "template": "{% liquid\r\nif product.title\r\n   echo product.title | upcase\r\nelse\r\n   echo 'product-1' | upcase \r\nendif\r\n\r\nfor i in (0..5)\r\n   echo i\r\nendfor %}",
      "data": {
        "product": {
          "title": "foo"
        }
      },
      "result": "FOO012345"
    },
    {
      "name": "tags, liquid, carriage return terminated tags",
      "template": "{% liquid\rif product.title\r   echo product.title | upcase\relse\r   echo 'product-1' | upcase \rendif\r\rfor i in (0..5)\r   echo i\rendfor %}",
      "data": {
        "product": {
          "title": "foo"
        }
      },
      "invalid": true
    },
    {
      "name": "tags, liquid, empty liquid tag",
      "template": "{% liquid %}",
      "result": ""
    },
    {
      "name": "tags, liquid, only whitespace",
      "template": "{% liquid\n   \n\n   \t \n\t\n  %}",
      "result": ""
    },
    {
      "name": "tags, liquid, single line comment tag",
      "template": "{% liquid\ncomment this is a comment\nendcomment\n%}",
      "result": ""
    },
    {
      "name": "tags, liquid, multi-line comment tag",
      "template": "{% liquid\ncomment this is a comment\nsplit over two lines\nendcomment\n%}",
      "result": ""
    },
    {
      "name": "tags, liquid, whitespace control",
      "template": "Hello,     \n{%- liquid\n  echo ' World! '\n-%}\n   Goodbye.",
      "result": "Hello, World! Goodbye."
    },
    {
      "name": "tags, liquid, reference test #2",
      "template": "{%- liquid\n  for value in array\n    echo value\n    unless forloop.last\n      echo '#'\n    endunless\n  endfor\n-%}",
      "data": {
        "array": [
          1,
          2,
          3
        ]
      },
      "result": "1#2#3"
    },
    {
      "name": "tags, liquid, reference test #3",
      "template": "{%- liquid\n  for value in array\n    assign double_value = value | times: 2\n    echo double_value | times: 2\n    unless forloop.last\n      echo '#'\n    endunless\n  endfor\n\n  echo '#'\n  echo double_value\n-%}",
      "data": {
        "array": [
          1,
          2,
          3
        ]
      },
      "result": "4#8#12#6"
    },
    {
      "name": "tags, liquid, reference test #4",
      "template": "{%- liquid echo 'a' -%}\nb\n{%- liquid echo 'c' -%}",
      "result": "abc"
    },
    {
      "name": "tags, liquid, nested liquid",
      "template": "{%- if true %}\n  {%- liquid\n    echo \"good\"\n  %}\n{%- endif -%}",
      "result": "good"
    },
    {
      "name": "tags, liquid, can't close nested blocks",
      "template": "{%- if true -%}\n42\n{%- liquid endif -%}",
      "invalid": true
    },
    {
      "name": "tags, liquid, bare liquid tag in liquid tag",
      "template": "{%- liquid\n  liquid\n  echo \"foo\"\n-%}",
      "result": "foo"
    },
    {
      "name": "tags, liquid, liquid tag in liquid tag",
      "template": "{%- liquid\n  liquid echo 'bar'\n  echo \"foo\"\n-%}",
      "result": "barfoo"
    },
    {
      "name": "tags, liquid, nested liquid in liquid tag",
      "template": "{%- liquid liquid liquid echo \"foo\" -%}",
      "result": "foo"
    },
    {
      "name": "tags, raw, literal",
      "template": "{% raw %}foo{% endraw %}",
      "result": "foo"
    },
    {
      "name": "tags, raw, output statement",
      "template": "{% raw %}{{ foo }}{% endraw %}",
      "result": "{{ foo }}"
    },
    {
      "name": "tags, raw, tag",
      "template": "{% raw %}{% assign x = 1 %}{% endraw %}",
      "result": "{% assign x = 1 %}"
    },
    {
      "name": "tags, raw, partial tag",
      "template": "{% raw %} %} {% }} {{ {% endraw %}",
      "result": " %} {% }} {{ "
    },
    {
      "name": "tags, raw, continue after raw",
      "template": "{% raw %} {% some raw content %} {% endraw %}a literal",
      "result": " {% some raw content %} a literal"
    },
    {
      "name": "tags, render, string literal name",
      "template": "{% render 'product-hero', product: product %}",
      "data": {
        "product": {
          "title": "foo",
          "tags": [
            "sports",
            "garden"
          ]
        }
      },
      "templates": {
        "product-hero": "{{ product.title }}\n{% for tag in product.tags %}- {{ tag }} {% endfor %}"
      },
      "result": "foo\n- sports - garden "
    },
    {
      "name": "tags, render, bound variable",
      "template": "{% render 'product-title' with collection.products[1] %}",
      "data": {
        "collection": {
          "products": [
            {
              "title": "bike"
            },
            {
              "title": "car"
            }
          ]
        }
      },
      "templates": {
        "product-title": "{{ product-title.title }}"
      },
      "result": "car"
    },
    {
      "name": "tags, render, bound variable does not exist",
      "template": "{% render 'product-title' with no.such.thing %}",
      "templates": {
        "product-title": "{{ product-title.title }}"
      },
      "result": ""
    },
    {
      "name": "tags, render, bound array variable",
      "template": "{% render 'prod' for collection.products %}",
      "data": {
        "collection": {
          "products": [
            {
              "title": "bike"
            },
            {
              "title": "car"
            }
          ]
        }
      },
      "templates": {
        "prod": "{{ prod.title }}"
      },
      "result": "bikecar"
    },
    {
      "name": "tags, render, bound variable with alias",
      "template": "{% render 'product-alias' with collection.products[1] as product %}",
      "data": {
        "collection": {
          "products": [
            {
              "title": "bike"
            },
            {
              "title": "car"
            }
          ]
        }
      },
      "templates": {
        "product-alias": "{{ product.title }}"
      },
      "result": "car"
    },
    {
      "name": "tags, render, some keyword arguments",
      "template": "{% render 'product-args', foo: 'hello', bar: 'there' %}",
      "templates": {
        "product-args": "{{ foo }} {{ bar }}"
      },
      "result": "hello there"
    },
    {
      "name": "tags, render, some keyword arguments including a range literal",
      "template": "{% render 'product-args', foo: (1..3), bar: 'there' %}",
      "templates": {
        "product-args": "{{ foo | join: '#' }} {{ bar }}"
      },
      "result": "1#2#3 there"
    },
    {
      "name": "tags, render, some keyword arguments no leading coma",
      "template": "{% render 'product-args' foo: 'hello', bar: 'there' %}",
      "templates": {
        "product-args": "{{ foo }} {{ bar }}"
      },
      "result": "hello there"
    },
    {
      "name": "tags, render, parent variables go out of scope",
      "template": "{% assign greeting = 'good morning' %}{{ greeting }} {% render 'outer-scope' %}{{ greeting }}",
      "templates": {
        "outer-scope": "{{ greeting }}"
      },
      "result": "good morning good morning"
    },
    {
      "name": "tags, render, for loop variables go out of scope",
      "template": "{% for i in (1..3) %}{{ i }}{% render 'loop-scope' %}{{ i }}{% endfor %}{{ i }}",
      "templates": {
        "loop-scope": "{{ i }}"
      },
      "result": "112233"
    },
    {
      "name": "tags, render, assigned variables do not leak into outer scope",
      "template": "{% render 'assign-outer-scope', customer: customer %} {{ last_name }}",
      "data": {
        "customer": {
          "first_name": "Holly"
        }
      },
      "templates": {
        "assign-outer-scope": "Hello, {{ customer.first_name }}{% assign last_name = 'Smith' %}"
      },
      "result": "Hello, Holly "
    },
    {
      "name": "tags, render, increment is isolated between renders",
      "template": "{% increment foo %} {% render 'increment' %} {% increment foo %}",
      "templates": {
        "increment": "{% increment foo %}"
      },
      "result": "0 0 1"
    },
    {
      "name": "tags, render, decrement is isolated between renders",
      "template": "{% decrement foo %} {% render 'decrement' %} {% decrement foo %}",
      "templates": {
        "decrement": "{% decrement foo %}"
      },
      "result": "-1 -1 -2"
    },
    {
      "name": "tags, render, forloop helper",
      "template": "{% render 'product' for collection.products %}",
      "data": {
        "collection": {
          "products": [
            {
              "title": "bike"
            },
            {
              "title": "car"
            }
          ]
        }
      },
      "templates": {
        "product": "Product: {{ product.title }} {% if forloop.first %}first{% endif %}{% if forloop.last %}last{% endif %} index:{{ forloop.index }} "
      },
      "result": "Product: bike first index:1 Product: car last index:2 "
    },
    {
      "name": "tags, render, render loops don't add parentloop",
      "template": "{% render 'product' for collection.products %}",
      "data": {
        "collection": {
          "products": [
            {
              "title": "bike"
            },
            {
              "title": "car"
            }
          ]
        }
      },
      "templates": {
        "product": "{{ product.title }}-{{ forloop.index0 }} {% for x in (1..3) %}{{ forloop.index0 }}{{ forloop.parentloop.index0 }} {% endfor %}"
      },
      "result": "bike-0 0 1 2 car-1 0 1 2 "
    },
    {
      "name": "tags, render, render loops can't access parentloop",
      "template": "{% for x in (1..3) %}{% render 'product' for collection.products %}{% endfor %}",
      "data": {
        "collection": {
          "products": [
            {
              "title": "bike"
            },
            {
              "title": "car"
            }
          ]
        }
      },
      "templates": {
        "product": "{{ product.title }}-{{ forloop.index0 }} {{ forloop.parentloop.index0 }}"
      },
      "result": "bike-0 car-1 bike-0 car-1 bike-0 car-1 "
    },
    {
      "name": "tags, render, assign to keyword argument",
      "template": "{% render 'product-args', foo: 'hello' %}{{ foo }}",
      "templates": {
        "product-args": "{{ foo }}{% assign foo='goodbye' %} {{ foo }}"
      },
      "result": "hello goodbye"
    },
    {
      "name": "tags, tablerow, one row",
      "template": "{% tablerow tag in collection.tags %}{{ tag }}{% endtablerow %}",
      "data": {
        "collection": {
          "tags": [
            "tag1",
            "tag2",
            "tag3",
            "tag4"
          ]
        }
      },
      "result": "<tr class=\"row1\">\n<td class=\"col1\">tag1</td><td class=\"col2\">tag2</td><td class=\"col3\">tag3</td><td class=\"col4\">tag4</td></tr>\n"
    },
    {
      "name": "tags, tablerow, one row with limit",
      "template": "{% tablerow tag in collection.tags limit: 2 %}{{ tag }}{% endtablerow %}",
      "data": {
        "collection": {
          "tags": [
            "tag1",
            "tag2",
            "tag3",
            "tag4"
          ]
        }
      },
      "result": "<tr class=\"row1\">\n<td class=\"col1\">tag1</td><td class=\"col2\">tag2</td></tr>\n"
    },
    {
      "name": "tags, tablerow, one row with offset",
      "template": "{% tablerow tag in collection.tags offset: 2 %}{{ tag }}{% endtablerow %}",
      "data": {
        "collection": {
          "tags": [
            "tag1",
            "tag2",
            "tag3",
            "tag4"
          ]
        }
      },
      "result": "<tr class=\"row1\">\n<td class=\"col1\">tag3</td><td class=\"col2\">tag4</td></tr>\n"
    },
    {
      "name": "tags, tablerow, two columns",
      "template": "{% tablerow tag in collection.tags cols:2 %}{{ tag }}{% endtablerow %}",
      "data": {
        "collection": {
          "tags": [
            "tag1",
            "tag2",
            "tag3",
            "tag4"
          ]
        }
      },
      "result": "<tr class=\"row1\">\n<td class=\"col1\">tag1</td><td class=\"col2\">tag2</td></tr>\n<tr class=\"row2\"><td class=\"col1\">tag3</td><td class=\"col2\">tag4</td></tr>\n"
    },
    {
      "name": "tags, tablerow, two column range",
      "template": "{% tablerow i in (1..4) cols:2 %}{{ i }} {{ tablerowloop.col_first }}{% endtablerow %}",
      "result": "<tr class=\"row1\">\n<td class=\"col1\">1 true</td><td class=\"col2\">2 false</td></tr>\n<tr class=\"row2\"><td class=\"col1\">3 true</td><td class=\"col2\">4 false</td></tr>\n"
    },
    {
      "name": "tags, tablerow, two column odd range",
      "template": "{% tablerow i in (1..5) cols:2 %}{{ i }} {{ tablerowloop.col_first }}{% endtablerow %}",
      "result": "<tr class=\"row1\">\n<td class=\"col1\">1 true</td><td class=\"col2\">2 false</td></tr>\n<tr class=\"row2\"><td class=\"col1\">3 true</td><td class=\"col2\">4 false</td></tr>\n<tr class=\"row3\"><td class=\"col1\">5 true</td></tr>\n"
    },
    {
      "name": "tags, tablerow, two column odd range row numbers",
      "template": "{% tablerow i in (1..5) cols:2 %}{{ i }} {{ tablerowloop.row }}{% endtablerow %}",
      "result": "<tr class=\"row1\">\n<td class=\"col1\">1 1</td><td class=\"col2\">2 1</td></tr>\n<tr class=\"row2\"><td class=\"col1\">3 2</td><td class=\"col2\">4 2</td></tr>\n<tr class=\"row3\"><td class=\"col1\">5 3</td></tr>\n"
    },
    {
      "name": "tags, tablerow, no cols param",
      "template": "{% tablerow i in (1..2) %}\ncol: {{ tablerowloop.col }}\ncol0: {{ tablerowloop.col0 }}\ncol_first: {{ tablerowloop.col_first }}\ncol_last: {{ tablerowloop.col_last }}\nfirst: {{ tablerowloop.first }}\nindex: {{ tablerowloop.index }}\nindex0: {{ tablerowloop.index0 }}\nlast: {{ tablerowloop.last }}\nlength: {{ tablerowloop.length }}\nrindex: {{ tablerowloop.rindex }}\nrindex0: {{ tablerowloop.rindex0 }}\nrow: {{ tablerowloop.row }}\n{% endtablerow %}",
      "result": "<tr class=\"row1\">\n<td class=\"col1\">\ncol: 1\ncol0: 0\ncol_first: true\ncol_last: false\nfirst: true\nindex: 1\nindex0: 0\nlast: false\nlength: 2\nrindex: 2\nrindex0: 1\nrow: 1\n</td><td class=\"col2\">\ncol: 2\ncol0: 1\ncol_first: false\ncol_last: true\nfirst: false\nindex: 2\nindex0: 1\nlast: true\nlength: 2\nrindex: 1\nrindex0: 0\nrow: 1\n</td></tr>\n"
    },
    {
      "name": "tags, tablerow, cols is a string",
      "template": "{% tablerow i in (1..4) cols:'2' %}{{ i }} {{ tablerowloop.col_first }}{% endtablerow %}",
      "result": "<tr class=\"row1\">\n<td class=\"col1\">1 true</td><td class=\"col2\">2 false</td></tr>\n<tr class=\"row2\"><td class=\"col1\">3 true</td><td class=\"col2\">4 false</td></tr>\n"
    },
    {
      "name": "tags, tablerow, cols is a float",
      "template": "{% tablerow i in (1..4) cols:2.6 %}{{ i }} {{ tablerowloop.col_first }}{% endtablerow %}",
      "result": "<tr class=\"row1\">\n<td class=\"col1\">1 true</td><td class=\"col2\">2 false</td></tr>\n<tr class=\"row2\"><td class=\"col1\">3 true</td><td class=\"col2\">4 false</td></tr>\n"
    },
    {
      "name": "tags, tablerow, limit is a string",
      "template": "{% tablerow i in (1..4) limit:'2' %}{{ i }} {{ tablerowloop.col_first }}{% endtablerow %}",
      "result": "<tr class=\"row1\">\n<td class=\"col1\">1 true</td><td class=\"col2\">2 false</td></tr>\n"
    },
    {
      "name": "tags, tablerow, offset is a string",
      "template": "{% tablerow i in (1..4) offset:'2' %}{{ i }} {{ tablerowloop.col_first }}{% endtablerow %}",
      "result": "<tr class=\"row1\">\n<td class=\"col1\">3 true</td><td class=\"col2\">4 false</td></tr>\n"
    },
    {
      "name": "tags, tablerow, break from a tablerow loop",
      "template": "{% tablerow n in (1..3) cols:2 %}{{n}}{% break %}{{n}}{% endtablerow %}",
      "result": "<tr class=\"row1\">\n<td class=\"col1\">1</td></tr>\n"
    },
    {
      "name": "tags, tablerow, continue from a tablerow loop",
      "template": "{% tablerow n in (1..3) cols:2 %}{{n}}{% continue %}{{n}}{% endtablerow %}",
      "result": "<tr class=\"row1\">\n<td class=\"col1\">1</td><td class=\"col2\">2</td></tr>\n<tr class=\"row2\"><td class=\"col1\">3</td></tr>\n"
    },
    {
      "name": "tags, tablerow, break from a tablerow loop inside a for loop",
      "template": "{% for i in (1..2) -%}\\n{% for j in (1..2) -%}\\n{% tablerow k in (1..3) %}{% break %}{% endtablerow -%}\\nloop j={{ j }}\\n{% endfor -%}\\nloop i={{ i }}\\n{% endfor -%}\\nafter loop\\n",
      "result": "\\n\\n<tr class=\"row1\">\n<td class=\"col1\"></td></tr>\n\\nloop j=1\\n\\n<tr class=\"row1\">\n<td class=\"col1\"></td></tr>\n\\nloop j=2\\n\\nloop i=1\\n\\n\\n<tr class=\"row1\">\n<td class=\"col1\"></td></tr>\n\\nloop j=1\\n\\n<tr class=\"row1\">\n<td class=\"col1\"></td></tr>\n\\nloop j=2\\n\\nloop i=2\\n\\nafter loop\\n"
    },
    {
      "name": "tags, unless, literal false condition",
      "template": "{% unless false %}foo{% endunless %}",
      "result": "foo"
    },
    {
      "name": "tags, unless, literal true condition",
      "template": "{% unless true %}foo{% endunless %}",
      "result": ""
    },
    {
      "name": "tags, unless, blocks that contain only whitespace are not rendered",
      "template": "{% unless false %}  {% endunless %}",
      "result": ""
    },
    {
      "name": "tags, unless, alternative block",
      "template": "{% unless true %}foo{% else %}bar{% endunless %}",
      "result": "bar"
    },
    {
      "name": "tags, unless, conditional alternative block",
      "template": "{% unless true %}foo{% elsif true %}bar{% endunless %}",
      "result": "bar"
    },
    {
      "name": "tags, unless, conditional alternative block with default",
      "template": "{% unless true %}foo{% elsif false %}bar{% else %}hello{% endunless %}",
      "result": "hello"
    },
    {
      "name": "tags, unless, zero is not equal to false",
      "template": "{% unless 0 == false %}Hello{% else %}Goodbye{% endunless %}",
      "result": "Hello"
    },
    {
      "name": "tags, unless, zero is truthy",
      "template": "{% unless 0 %}Hello{% else %}Goodbye{% endunless %}",
      "result": "Goodbye"
    },
    {
      "name": "tags, unless, one is not equal to true",
      "template": "{% unless 1 == true %}Hello{% else %}Goodbye{% endunless %}",
      "result": "Hello"
    },
    {
      "name": "tags, unless, array is equal to array",
      "template": "{% assign x = 'a,b,c' | split: ',' %}{% assign y = 'a,b,c' | split: ',' %}{% unless x == y %}true{% else %}false{% endunless %}",
      "result": "false"
    },
    {
      "name": "tags, unless, array is equal to array from context",
      "template": "{% assign y = 'a,b,c' | split: ',' %}{% unless x == y %}true{% else %}false{% endunless %}",
      "data": {
        "x": [
          "a",
          "b",
          "c"
        ]
      },
      "result": "false"
    },
    {
      "name": "tags, unless, else tag expressions are ignored",
      "template": "{% unless true %}1{% else nonsense %}2{% endunless %}",
      "tags": [
        "strict"
      ],
      "result": "2"
    },
    {
      "name": "tags, unless, extra else blocks are ignored",
      "template": "{% unless true %}1{% else %}2{% else %}3{% endunless %}",
      "tags": [
        "strict"
      ],
      "result": "2"
    },
    {
      "name": "tags, unless, extra elsif blocks are ignored",
      "template": "{% unless true %}1{% else %}2{% elsif true %}3{% endunless %}",
      "tags": [
        "strict"
      ],
      "result": "2"
    }
  ]
}