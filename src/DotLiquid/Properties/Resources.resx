<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AssignTagSyntaxException" xml:space="preserve">
    <value>Syntax Error in 'assign' tag - Valid syntax: assign [var] = [source]</value>
  </data>
  <data name="BlankFileSystemDoesNotAllowIncludesException" xml:space="preserve">
    <value>Error - This liquid context does not allow includes</value>
  </data>
  <data name="BlockTagAlreadyDefinedException" xml:space="preserve">
    <value>Liquid Error - Block '{0}' already defined</value>
  </data>
  <data name="BlockTagNoElseException" xml:space="preserve">
    <value>{0} tag does not expect else tag</value>
  </data>
  <data name="BlockTagNoEndException" xml:space="preserve">
    <value>'end' is not a valid delimiter for {0} tags. Use {1}</value>
  </data>
  <data name="BlockTagNotClosedException" xml:space="preserve">
    <value>{0} tag was never closed</value>
  </data>
  <data name="BlockTagNotTerminatedException" xml:space="preserve">
    <value>Tag '{0}' was not properly terminated with regexp: {1}</value>
  </data>
  <data name="BlockTagSyntaxException" xml:space="preserve">
    <value>Syntax Error in 'block' tag - Valid syntax: block [name]</value>
  </data>
  <data name="BlockUnknownTagException" xml:space="preserve">
    <value>Unknown tag '{0}'</value>
  </data>
  <data name="BlockVariableNotTerminatedException" xml:space="preserve">
    <value>Variable '{0}' was not properly terminated with regexp: {1}</value>
  </data>
  <data name="CaptureTagSyntaxException" xml:space="preserve">
    <value>Syntax Error in 'capture' tag - Valid syntax: capture [var]</value>
  </data>
  <data name="CaseTagElseSyntaxException" xml:space="preserve">
    <value>Syntax Error in 'case' tag - Valid else condition: {{% else %}} (no parameters)</value>
  </data>
  <data name="CaseTagSyntaxException" xml:space="preserve">
    <value>Syntax Error in 'case' tag - Valid syntax: case [condition]</value>
  </data>
  <data name="CaseTagWhenSyntaxException" xml:space="preserve">
    <value>Syntax Error in 'case' tag - Valid when condition: {{% when [condition] [or condition2...] %}}</value>
  </data>
  <data name="ConditionUnknownOperatorException" xml:space="preserve">
    <value>Unknown operator {0}</value>
  </data>
  <data name="ContextLiquidError" xml:space="preserve">
    <value>Liquid error: {0}</value>
  </data>
  <data name="ContextLiquidSyntaxError" xml:space="preserve">
    <value>Liquid syntax error: {0}</value>
  </data>
  <data name="ContextObjectInvalidException" xml:space="preserve">
    <value>Object '{0}' is invalid because it is neither a built-in type nor implements ILiquidizable</value>
  </data>
  <data name="ContextStackException" xml:space="preserve">
    <value>Nesting too deep</value>
  </data>
  <data name="CycleTagSyntaxException" xml:space="preserve">
    <value>Syntax Error in 'cycle' tag - Valid syntax: cycle [name :] var [, var2, var3 ...]</value>
  </data>
  <data name="DropWrongNamingConventionMessage" xml:space="preserve">
    <value>Missing property. Did you mean '{0}'?</value>
  </data>
  <data name="ExtendsTagCanBeUsedOneException" xml:space="preserve">
    <value>Liquid Error - 'extends' tag can be used only once</value>
  </data>
  <data name="ExtendsTagMustBeFirstTagException" xml:space="preserve">
    <value>Liquid Error - 'extends' must be the first tag in an extending template</value>
  </data>
  <data name="ExtendsTagSyntaxException" xml:space="preserve">
    <value>Syntax Error in 'extends' tag - Valid syntax: extends [template]</value>
  </data>
  <data name="ExtendsTagUnallowedTagsException" xml:space="preserve">
    <value>Liquid Error - Only 'comment' and 'block' tags are allowed in an extending template</value>
  </data>
  <data name="ForTagSyntaxException" xml:space="preserve">
    <value>Syntax Error in 'for' tag - Valid syntax: for [item] in [collection]</value>
  </data>
  <data name="IfTagSyntaxException" xml:space="preserve">
    <value>Syntax Error in 'if' tag - Valid syntax: if [expression]</value>
  </data>
  <data name="IncludeTagSyntaxException" xml:space="preserve">
    <value>Syntax Error in 'include' tag - Valid syntax: include [template]</value>
  </data>
  <data name="LocalFileSystemIllegalTemplateNameException" xml:space="preserve">
    <value>Error - Illegal template name '{0}'</value>
  </data>
  <data name="LocalFileSystemIllegalTemplatePathException" xml:space="preserve">
    <value>Error - Illegal template path '{0}'</value>
  </data>
  <data name="LocalFileSystemTemplateNotFoundException" xml:space="preserve">
    <value>Error - No such template '{0}'</value>
  </data>
  <data name="StrainerFilterHasNoValueException" xml:space="preserve">
    <value>Error - Filter '{0}' does not have a default value for '{1}' and no value was supplied</value>
  </data>
  <data name="TableRowTagSyntaxException" xml:space="preserve">
    <value>Syntax Error in 'tablerow' tag - Valid syntax: tablerow [item] in [collection] cols=[number]</value>
  </data>
  <data name="VariableFilterNotFoundException" xml:space="preserve">
    <value>Error - Filter '{0}' in '{1}' could not be found.</value>
  </data>
  <data name="VariableNotFoundException" xml:space="preserve">
    <value>Error - Variable '{0}' could not be found</value>
  </data>
  <data name="WeakTableKeyNotFoundException" xml:space="preserve">
    <value>key could not be found</value>
  </data>
  <data name="IfTagTooMuchConditionsException" xml:space="preserve">
    <value>Syntax Error in 'if' tag - max 500 conditions are allowed</value>
  </data>
</root>