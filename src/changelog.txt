- Updated TypeUtility.IsAnonymousType to detect anonymous types when running on Mono
- Removed System.Web reference for .NET 4.0 version because System.Web.HttpUtility can be replaced by System.Net.WebUtility

v1.6.0 - 2011-06-25
- Added SymbolSource support to NuGet package generation script
- Planning to use semantic versioning for future releases (http://semver.org/)

v1.5.6.0 - 2011-06-21
- ERB-like trimming now works correctly for \r\n newlines

v1.5.4.0 - 2011-04-30
- Because it's a common (and easy) mistake to use C# property names while Template.NamingConvention is set to
  RubyNamingConvention, and this situation is both surprising and difficult to debug, I have added
  a "special case" error message when the code detects that the property name doesn't match, but would
  match if you used a Ruby-style name.

v1.5.3.0 - 2011-04-05
- Minor fixes to error handling in Include tag; now returns (or throws, if RenderParameters.RethrowErrors is true) correct error message.
- Minor fixes to null template handling in LocalFileSystem

v1.5.2.0 - 2011-03-19
- "Assign" tag now works correctly with European (i.e. comma) decimal separators.
- If "Assign" tag is used with a decimal (or float or double) value, and the decimal
  separator for the current culture is ",", then the code will first try parsing
  using "," and then fallback to the invariant culture's decimal separator (".").

v1.5.1.0 - 2011-03-19
- Filters can now access the current context. To do this, modify your filter method(s) to take
  in a Context object as the first argument. DotLiquid will automatically pass the current
  context to your filter.
- Minor updates to website

v1.5.0.0 - 2011-03-01
- Fix for RubyNamingConvention incorrectly handling full uppercase memebers. Let's do it the same way Ruby does!
- Dispose MemoryStreamWriter correctly
- BREAKING CHANGE: Refactored Template.Render(*) methods, because they were getting a little out of hand. I'm no longer using C# 4 optional parameters. Instead, I've simplified the primary (i.e. the one that returns a string) Render method to three overloads:
  - Render()
  - Render(Hash)
  - Render(RenderParameters)
  That last one is where you can specify filters, registers, and whether to rethrow errors. If any of the RenderParameters values are null, then default values will be used, as before.
  For the Render() method that takes in a stream, I have not provided any overloads apart from the basic Render(StreamWriter streamWriter, RenderParameters parameters), because I want to keep it as simple as possible and I don't think this version will be commonly used.

v1.2.1.0 - 2011-02-12
- Signed DotLiquid assembly with strong name. DotLiquid.dll can now be placed in GAC.
- Created changelog.txt :)